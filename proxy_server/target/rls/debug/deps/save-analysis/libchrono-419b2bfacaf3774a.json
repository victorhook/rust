{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10","program":"/home/victor/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","chrono","/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","-C","metadata=419b2bfacaf3774a","-C","extra-filename=-419b2bfacaf3774a","--out-dir","/home/victor/coding/rust/proxy_server/target/rls/debug/deps","-L","dependency=/home/victor/coding/rust/proxy_server/target/rls/debug/deps","--extern","num_integer=/home/victor/coding/rust/proxy_server/target/rls/debug/deps/libnum_integer-385f0a78808d20ef.rmeta","--extern","num_traits=/home/victor/coding/rust/proxy_server/target/rls/debug/deps/libnum_traits-58ce78cb8887d759.rmeta","--extern","time=/home/victor/coding/rust/proxy_server/target/rls/debug/deps/libtime-fb768de7fc0c857d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/victor/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/victor/coding/rust/proxy_server/target/rls/debug/deps/libchrono-419b2bfacaf3774a.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[1251399236438604660,11407542962146069523]},"crate_root":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src","external_crates":[{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":15,"id":{"name":"time","disambiguator":[14547889420539770218,14280025144223677451]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":16,"id":{"name":"libc","disambiguator":[3788287329090602773,3486361580310634080]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":17,"id":{"name":"num_integer","disambiguator":[13017728015819289294,6775247472771399026]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[9840116122763122590,5652754665378633953]}}],"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":76,"byte_end":39922,"line_start":4,"line_end":1065,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":304},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19430,"byte_end":19438,"line_start":438,"line_end":438,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1417},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19499,"byte_end":19504,"line_start":441,"line_end":441,"column_start":35,"column_end":40},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19541,"byte_end":19549,"line_start":442,"line_end":442,"column_start":36,"column_end":44},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19551,"byte_end":19557,"line_start":442,"line_end":442,"column_start":46,"column_end":52},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1374},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19559,"byte_end":19570,"line_start":442,"line_end":442,"column_start":54,"column_end":65},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1424},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19572,"byte_end":19575,"line_start":442,"line_end":442,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19577,"byte_end":19588,"line_start":442,"line_end":442,"column_start":72,"column_end":83},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1474},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19625,"byte_end":19634,"line_start":443,"line_end":443,"column_start":35,"column_end":44},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1495},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19636,"byte_end":19643,"line_start":443,"line_end":443,"column_start":46,"column_end":53},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19645,"byte_end":19654,"line_start":443,"line_end":443,"column_start":55,"column_end":64},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1536},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19656,"byte_end":19669,"line_start":443,"line_end":443,"column_start":66,"column_end":79},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1559},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19687,"byte_end":19691,"line_start":444,"line_end":444,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":713},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19693,"byte_end":19701,"line_start":444,"line_end":444,"column_start":22,"column_end":30},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19703,"byte_end":19711,"line_start":444,"line_end":444,"column_start":32,"column_end":40},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1588},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19733,"byte_end":19741,"line_start":445,"line_end":445,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1566},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19743,"byte_end":19756,"line_start":445,"line_end":445,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1782},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19858,"byte_end":19868,"line_start":448,"line_end":448,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1060},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19870,"byte_end":19881,"line_start":448,"line_end":448,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19899,"byte_end":19910,"line_start":449,"line_end":449,"column_start":16,"column_end":27},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1344},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20045,"byte_end":20053,"line_start":453,"line_end":453,"column_start":32,"column_end":40},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1363},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20055,"byte_end":20063,"line_start":453,"line_end":453,"column_start":42,"column_end":50},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1877},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20065,"byte_end":20072,"line_start":453,"line_end":453,"column_start":52,"column_end":59},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20106,"byte_end":20114,"line_start":454,"line_end":454,"column_start":32,"column_end":40},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20116,"byte_end":20122,"line_start":454,"line_end":454,"column_start":42,"column_end":48},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1417},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20183,"byte_end":20188,"line_start":456,"line_end":456,"column_start":31,"column_end":36},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1424},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20221,"byte_end":20224,"line_start":457,"line_end":457,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20226,"byte_end":20237,"line_start":457,"line_end":457,"column_start":37,"column_end":48},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1474},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20271,"byte_end":20280,"line_start":458,"line_end":458,"column_start":32,"column_end":41},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20282,"byte_end":20291,"line_start":458,"line_end":458,"column_start":43,"column_end":52},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1536},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20293,"byte_end":20306,"line_start":458,"line_end":458,"column_start":54,"column_end":67},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1559},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20339,"byte_end":20343,"line_start":459,"line_end":459,"column_start":31,"column_end":35},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1588},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20376,"byte_end":20384,"line_start":460,"line_end":460,"column_start":32,"column_end":40},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1566},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20386,"byte_end":20399,"line_start":460,"line_end":460,"column_start":42,"column_end":55},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20432,"byte_end":20443,"line_start":461,"line_end":461,"column_start":31,"column_end":42},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59729,"byte_end":59740,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":69}},{"kind":"Use","ref_id":{"krate":0,"index":1417},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59789,"byte_end":59794,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":69}},{"kind":"Use","ref_id":{"krate":0,"index":1424},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59815,"byte_end":59818,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":69}},{"kind":"Use","ref_id":{"krate":0,"index":1474},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21018,"byte_end":21027,"line_start":486,"line_end":486,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":378},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21029,"byte_end":21037,"line_start":486,"line_end":486,"column_start":37,"column_end":45},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21039,"byte_end":21047,"line_start":486,"line_end":486,"column_start":47,"column_end":55},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":1495},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21077,"byte_end":21084,"line_start":487,"line_end":487,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21110,"byte_end":21119,"line_start":488,"line_end":488,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":1536},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21149,"byte_end":21162,"line_start":489,"line_end":489,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":1849},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467154,"byte_end":467167,"line_start":40,"line_end":40,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1021}},{"kind":"Use","ref_id":{"krate":0,"index":1819},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467191,"byte_end":467197,"line_start":41,"line_end":41,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1021}},{"kind":"Use","ref_id":{"krate":0,"index":1268},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467220,"byte_end":467225,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1021}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":76,"byte_end":39922,"line_start":4,"line_end":1065,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":25},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":69},{"krate":0,"index":257},{"krate":0,"index":687},{"krate":0,"index":822},{"krate":0,"index":1021},{"krate":0,"index":1315},{"krate":0,"index":1877},{"krate":0,"index":1909},{"krate":0,"index":1907},{"krate":0,"index":1906},{"krate":0,"index":1904},{"krate":0,"index":1902},{"krate":0,"index":1899},{"krate":0,"index":1329},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1341},{"krate":0,"index":1911},{"krate":0,"index":1916},{"krate":0,"index":1913},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1363}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17866,"byte_end":17888,"line_start":387,"line_end":387,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17889,"byte_end":17928,"line_start":388,"line_end":388,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17929,"byte_end":17948,"line_start":389,"line_end":389,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":41},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20004,"byte_end":20011,"line_start":452,"line_end":452,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":69},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":1374},{"krate":0,"index":1401},{"krate":0,"index":1397},{"krate":0,"index":1394},{"krate":0,"index":1392},{"krate":0,"index":1389},{"krate":0,"index":1385},{"krate":0,"index":84},{"krate":0,"index":92},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":129},{"krate":0,"index":188},{"krate":0,"index":224},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1376},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42828,"byte_end":42832,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1378},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42906,"byte_end":42912,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1381},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43078,"byte_end":43087,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1374},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42679,"byte_end":42690,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1381}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43237,"byte_end":43243,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43471,"byte_end":43479,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43736,"byte_end":43742,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43989,"byte_end":43992,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44567,"byte_end":44575,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44546,"byte_end":44555,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45073,"byte_end":45084,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45052,"byte_end":45061,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45707,"byte_end":45724,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45686,"byte_end":45695,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46423,"byte_end":46440,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46402,"byte_end":46411,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47141,"byte_end":47157,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47120,"byte_end":47129,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47645,"byte_end":47651,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48006,"byte_end":48012,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48118,"byte_end":48121,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn (&self) -> FixedOffset","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":104},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48320,"byte_end":48328,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":105},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48551,"byte_end":48557,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49174,"byte_end":49177,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49993,"byte_end":50000,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50849,"byte_end":50851,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51402,"byte_end":51408,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52386,"byte_end":52392,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53083,"byte_end":53093,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53918,"byte_end":53927,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54410,"byte_end":54423,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55163,"byte_end":55179,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn (&self, millis: i64) -> DateTime<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55910,"byte_end":55930,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn (&self, millis: i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56632,"byte_end":56647,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn (&self, nanos: i64) -> DateTime<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57434,"byte_end":57451,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57722,"byte_end":57733,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57845,"byte_end":57867,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58007,"byte_end":58033,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58183,"byte_end":58198,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58550,"byte_end":58569,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58843,"byte_end":58863,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58989,"byte_end":59013,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59220,"byte_end":59233,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59506,"byte_end":59523,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1404},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62853,"byte_end":62864,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1405}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63468,"byte_end":63472,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63807,"byte_end":63815,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64557,"byte_end":64561,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64896,"byte_end":64904,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65203,"byte_end":65218,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65182,"byte_end":65191,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65380,"byte_end":65395,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65359,"byte_end":65368,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1417},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72299,"byte_end":72304,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72395,"byte_end":72400,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn () -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72601,"byte_end":72604,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn () -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"cfg(not (all (target_arch = \"wasm32\", feature = \"wasmbind\")))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72527,"byte_end":72589,"line_start":90,"line_end":90,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1424},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77357,"byte_end":77360,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77473,"byte_end":77478,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn () -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77663,"byte_end":77666,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn () -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"cfg(not (all (target_arch = \"wasm32\", feature = \"wasmbind\")))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77589,"byte_end":77651,"line_start":41,"line_end":41,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":257},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20649,"byte_end":20654,"line_start":473,"line_end":473,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":338},{"krate":0,"index":462},{"krate":0,"index":475},{"krate":0,"index":560},{"krate":0,"index":680},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1474},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115576,"byte_end":115585,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1475}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":378},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115704,"byte_end":115712,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":379},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115862,"byte_end":115870,"line_start":108,"line_end":108,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118180,"byte_end":118188,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119039,"byte_end":119051,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119945,"byte_end":119952,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120822,"byte_end":120833,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121839,"byte_end":121850,"line_start":263,"line_end":263,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":124213,"byte_end":124228,"line_start":311,"line_end":311,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127109,"byte_end":127130,"line_start":381,"line_end":381,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127088,"byte_end":127097,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128079,"byte_end":128104,"line_start":405,"line_end":405,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130126,"byte_end":130140,"line_start":456,"line_end":456,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130789,"byte_end":130797,"line_start":477,"line_end":477,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130768,"byte_end":130777,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131613,"byte_end":131620,"line_start":501,"line_end":501,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131592,"byte_end":131601,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132506,"byte_end":132517,"line_start":524,"line_end":524,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132485,"byte_end":132494,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133456,"byte_end":133469,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133435,"byte_end":133444,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134542,"byte_end":134559,"line_start":574,"line_end":574,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134521,"byte_end":134530,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135560,"byte_end":135573,"line_start":600,"line_end":600,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135539,"byte_end":135548,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136674,"byte_end":136691,"line_start":625,"line_end":625,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136653,"byte_end":136662,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137696,"byte_end":137708,"line_start":651,"line_end":651,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137675,"byte_end":137684,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138825,"byte_end":138841,"line_start":676,"line_end":676,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138804,"byte_end":138813,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140514,"byte_end":140518,"line_start":728,"line_end":728,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140493,"byte_end":140502,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141060,"byte_end":141068,"line_start":747,"line_end":747,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141039,"byte_end":141048,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141745,"byte_end":141749,"line_start":765,"line_end":765,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141724,"byte_end":141733,"line_start":764,"line_end":764,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142296,"byte_end":142304,"line_start":784,"line_end":784,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142275,"byte_end":142284,"line_start":783,"line_end":783,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143351,"byte_end":143369,"line_start":810,"line_end":810,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145002,"byte_end":145020,"line_start":846,"line_end":846,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146946,"byte_end":146967,"line_start":885,"line_end":885,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn (self, rhs: NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148726,"byte_end":148743,"line_start":925,"line_end":925,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is same to the ordinary `format` method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148647,"byte_end":148700,"line_start":923,"line_end":923,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148705,"byte_end":148714,"line_start":924,"line_end":924,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150416,"byte_end":150422,"line_start":964,"line_end":964,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150337,"byte_end":150390,"line_start":962,"line_end":962,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150395,"byte_end":150404,"line_start":963,"line_end":963,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1495},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196485,"byte_end":196492,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1496}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198430,"byte_end":198434,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198409,"byte_end":198418,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198884,"byte_end":198888,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198863,"byte_end":198872,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199356,"byte_end":199361,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199335,"byte_end":199344,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1513},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209121,"byte_end":209130,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1514},{"krate":0,"index":1515}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209788,"byte_end":209796,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209767,"byte_end":209776,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210653,"byte_end":210665,"line_start":229,"line_end":229,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210632,"byte_end":210641,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211406,"byte_end":211420,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211385,"byte_end":211394,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212480,"byte_end":212498,"line_start":279,"line_end":279,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212459,"byte_end":212468,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213322,"byte_end":213336,"line_start":303,"line_end":303,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213301,"byte_end":213310,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214412,"byte_end":214430,"line_start":330,"line_end":330,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214391,"byte_end":214400,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215254,"byte_end":215267,"line_start":354,"line_end":354,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215233,"byte_end":215242,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216352,"byte_end":216369,"line_start":381,"line_end":381,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216331,"byte_end":216340,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217293,"byte_end":217323,"line_start":406,"line_end":406,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217272,"byte_end":217281,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218295,"byte_end":218329,"line_start":431,"line_end":431,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218274,"byte_end":218283,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220979,"byte_end":220993,"line_start":497,"line_end":497,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":222156,"byte_end":222178,"line_start":526,"line_end":526,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn (&self, mut rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225687,"byte_end":225709,"line_start":612,"line_end":612,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn (&self, rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225666,"byte_end":225675,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228763,"byte_end":228784,"line_start":677,"line_end":677,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn (self, rhs: NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231230,"byte_end":231247,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231151,"byte_end":231204,"line_start":730,"line_end":730,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231209,"byte_end":231218,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233053,"byte_end":233059,"line_start":773,"line_end":773,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232974,"byte_end":233027,"line_start":771,"line_end":771,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233032,"byte_end":233041,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1536},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273976,"byte_end":273989,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1537},{"krate":0,"index":1538}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274651,"byte_end":274654,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274630,"byte_end":274639,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275937,"byte_end":275951,"line_start":108,"line_end":108,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275916,"byte_end":275925,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277293,"byte_end":277311,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277272,"byte_end":277281,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280690,"byte_end":280704,"line_start":211,"line_end":211,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281226,"byte_end":281230,"line_start":228,"line_end":228,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281205,"byte_end":281214,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281583,"byte_end":281587,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281562,"byte_end":281571,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282494,"byte_end":282503,"line_start":270,"line_end":270,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282473,"byte_end":282482,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283881,"byte_end":283897,"line_start":302,"line_end":302,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283860,"byte_end":283869,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285364,"byte_end":285379,"line_start":341,"line_end":341,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285343,"byte_end":285352,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286157,"byte_end":286180,"line_start":363,"line_end":363,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286136,"byte_end":286145,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286913,"byte_end":286936,"line_start":384,"line_end":384,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286892,"byte_end":286901,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287678,"byte_end":287700,"line_start":405,"line_end":405,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287657,"byte_end":287666,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291079,"byte_end":291097,"line_start":483,"line_end":483,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294641,"byte_end":294659,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297068,"byte_end":297089,"line_start":621,"line_end":621,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn (self, rhs: NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298527,"byte_end":298544,"line_start":654,"line_end":654,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298448,"byte_end":298501,"line_start":652,"line_end":652,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298506,"byte_end":298515,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300330,"byte_end":300336,"line_start":693,"line_end":693,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300251,"byte_end":300304,"line_start":691,"line_end":691,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300309,"byte_end":300318,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1559},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366877,"byte_end":366881,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1561},{"krate":0,"index":1562}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":713},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366989,"byte_end":366997,"line_start":50,"line_end":50,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":714},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367099,"byte_end":367107,"line_start":52,"line_end":52,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367456,"byte_end":367464,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367435,"byte_end":367444,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367765,"byte_end":367773,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367744,"byte_end":367753,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368170,"byte_end":368177,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368149,"byte_end":368158,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368532,"byte_end":368543,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368511,"byte_end":368520,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369030,"byte_end":369043,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369009,"byte_end":369018,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369534,"byte_end":369551,"line_start":108,"line_end":108,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369513,"byte_end":369522,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370096,"byte_end":370109,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370075,"byte_end":370084,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370604,"byte_end":370621,"line_start":129,"line_end":129,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370583,"byte_end":370592,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371167,"byte_end":371179,"line_start":140,"line_end":140,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371146,"byte_end":371155,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371672,"byte_end":371688,"line_start":150,"line_end":150,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371651,"byte_end":371660,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372033,"byte_end":372037,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372012,"byte_end":372021,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372259,"byte_end":372267,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372238,"byte_end":372247,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372527,"byte_end":372531,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372506,"byte_end":372515,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372755,"byte_end":372763,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372734,"byte_end":372743,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372957,"byte_end":372963,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372936,"byte_end":372945,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373084,"byte_end":373092,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373063,"byte_end":373072,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373318,"byte_end":373331,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373297,"byte_end":373306,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373563,"byte_end":373581,"line_start":210,"line_end":210,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373542,"byte_end":373551,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373901,"byte_end":373919,"line_start":219,"line_end":219,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373880,"byte_end":373889,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374420,"byte_end":374441,"line_start":231,"line_end":231,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374399,"byte_end":374408,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374624,"byte_end":374633,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374603,"byte_end":374612,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374939,"byte_end":374950,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374918,"byte_end":374927,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375495,"byte_end":375512,"line_start":262,"line_end":262,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375416,"byte_end":375469,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375474,"byte_end":375483,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375987,"byte_end":375993,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375908,"byte_end":375961,"line_start":270,"line_end":270,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375966,"byte_end":375975,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1567},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380825,"byte_end":380829,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1569},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380968,"byte_end":380974,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1571},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381113,"byte_end":381119,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1573},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381258,"byte_end":381263,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1575},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381499,"byte_end":381505,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1577},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381565,"byte_end":381580,"line_start":58,"line_end":58,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1566},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380732,"byte_end":380745,"line_start":35,"line_end":35,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"SecondsFormat::{Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":1567},{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1575},{"krate":0,"index":1577}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381878,"byte_end":381886,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1591}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382527,"byte_end":382535,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382506,"byte_end":382515,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382723,"byte_end":382727,"line_start":93,"line_end":93,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382702,"byte_end":382711,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382952,"byte_end":382956,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382931,"byte_end":382940,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383173,"byte_end":383182,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383152,"byte_end":383161,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384003,"byte_end":384019,"line_start":131,"line_end":131,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383982,"byte_end":383991,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384840,"byte_end":384855,"line_start":155,"line_end":155,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384819,"byte_end":384828,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385185,"byte_end":385208,"line_start":165,"line_end":165,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385164,"byte_end":385173,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385550,"byte_end":385573,"line_start":175,"line_end":175,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385529,"byte_end":385538,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385917,"byte_end":385939,"line_start":185,"line_end":185,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385896,"byte_end":385905,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386084,"byte_end":386090,"line_start":191,"line_end":191,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386063,"byte_end":386072,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386211,"byte_end":386219,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386190,"byte_end":386199,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386449,"byte_end":386462,"line_start":204,"line_end":204,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386428,"byte_end":386437,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386715,"byte_end":386733,"line_start":212,"line_end":212,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386694,"byte_end":386703,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387099,"byte_end":387117,"line_start":222,"line_end":222,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387078,"byte_end":387087,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387546,"byte_end":387567,"line_start":232,"line_end":232,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: DateTime<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387525,"byte_end":387534,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387766,"byte_end":387775,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387745,"byte_end":387754,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387908,"byte_end":387919,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387887,"byte_end":387896,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391311,"byte_end":391329,"line_start":327,"line_end":327,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391954,"byte_end":391972,"line_start":339,"line_end":339,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393180,"byte_end":393194,"line_start":366,"line_end":366,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393615,"byte_end":393625,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393550,"byte_end":393603,"line_start":375,"line_end":375,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393957,"byte_end":393967,"line_start":383,"line_end":383,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393892,"byte_end":393945,"line_start":382,"line_end":382,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395430,"byte_end":395445,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn (&self, secform: SecondsFormat, use_z: bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395365,"byte_end":395418,"line_start":412,"line_end":412,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397204,"byte_end":397221,"line_start":466,"line_end":466,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397125,"byte_end":397178,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397183,"byte_end":397192,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397762,"byte_end":397768,"line_start":477,"line_end":477,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397683,"byte_end":397736,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397741,"byte_end":397750,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1021},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1595},{"krate":0,"index":1600},{"krate":0,"index":1598},{"krate":0,"index":1596},{"krate":0,"index":1602},{"krate":0,"index":1617},{"krate":0,"index":1615},{"krate":0,"index":1613},{"krate":0,"index":1611},{"krate":0,"index":1609},{"krate":0,"index":1618},{"krate":0,"index":1669},{"krate":0,"index":1666},{"krate":0,"index":1664},{"krate":0,"index":1662},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1671},{"krate":0,"index":1716},{"krate":0,"index":1713},{"krate":0,"index":1711},{"krate":0,"index":1709},{"krate":0,"index":1718},{"krate":0,"index":1727},{"krate":0,"index":1725},{"krate":0,"index":1722},{"krate":0,"index":1720},{"krate":0,"index":1729},{"krate":0,"index":1744},{"krate":0,"index":1742},{"krate":0,"index":1740},{"krate":0,"index":1738},{"krate":0,"index":1746},{"krate":0,"index":1779},{"krate":0,"index":1775},{"krate":0,"index":1772},{"krate":0,"index":1769},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1782},{"krate":0,"index":1793},{"krate":0,"index":1791},{"krate":0,"index":1788},{"krate":0,"index":1786},{"krate":0,"index":1785},{"krate":0,"index":1795},{"krate":0,"index":1817},{"krate":0,"index":1815},{"krate":0,"index":1813},{"krate":0,"index":1811},{"krate":0,"index":1810},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1130},{"krate":0,"index":1199},{"krate":0,"index":1243},{"krate":0,"index":1276},{"krate":0,"index":1868},{"krate":0,"index":1874},{"krate":0,"index":1300},{"krate":0,"index":1307},{"krate":0,"index":1312}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466466,"byte_end":466510,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1603},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467478,"byte_end":467482,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1605},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467516,"byte_end":467520,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1607},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467549,"byte_end":467554,"line_start":56,"line_end":56,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1602},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467448,"byte_end":467451,"line_start":50,"line_end":50,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1619},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468450,"byte_end":468454,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1621},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468556,"byte_end":468566,"line_start":78,"line_end":78,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1623},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468637,"byte_end":468647,"line_start":80,"line_end":80,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1625},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468782,"byte_end":468789,"line_start":83,"line_end":83,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1627},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468887,"byte_end":468900,"line_start":85,"line_end":85,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1629},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468983,"byte_end":468996,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1631},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469027,"byte_end":469032,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1633},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469074,"byte_end":469077,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1635},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469170,"byte_end":469181,"line_start":93,"line_end":93,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1637},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469274,"byte_end":469285,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1639},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469343,"byte_end":469350,"line_start":97,"line_end":97,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1641},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469426,"byte_end":469440,"line_start":99,"line_end":99,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1643},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469514,"byte_end":469528,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1645},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469569,"byte_end":469576,"line_start":103,"line_end":103,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1647},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469635,"byte_end":469639,"line_start":105,"line_end":105,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1649},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469698,"byte_end":469704,"line_start":107,"line_end":107,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1651},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469777,"byte_end":469783,"line_start":109,"line_end":109,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1653},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469858,"byte_end":469864,"line_start":111,"line_end":111,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1655},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470067,"byte_end":470077,"line_start":115,"line_end":115,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1657},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470257,"byte_end":470266,"line_start":118,"line_end":118,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1659},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470485,"byte_end":470493,"line_start":124,"line_end":124,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1618},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468313,"byte_end":468320,"line_start":73,"line_end":73,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp, Internal}","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1621},{"krate":0,"index":1623},{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1629},{"krate":0,"index":1631},{"krate":0,"index":1633},{"krate":0,"index":1635},{"krate":0,"index":1637},{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1645},{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1659}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1044},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470601,"byte_end":470616,"line_start":128,"line_end":128,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1045}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1672},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471415,"byte_end":471429,"line_start":162,"line_end":162,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1674},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471562,"byte_end":471575,"line_start":166,"line_end":166,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471724,"byte_end":471740,"line_start":170,"line_end":170,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1678},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471883,"byte_end":471898,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1680},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471976,"byte_end":471985,"line_start":178,"line_end":178,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1682},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472063,"byte_end":472072,"line_start":182,"line_end":182,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1684},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472319,"byte_end":472329,"line_start":186,"line_end":186,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1686},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472419,"byte_end":472430,"line_start":188,"line_end":188,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1688},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472520,"byte_end":472531,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1690},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472621,"byte_end":472632,"line_start":192,"line_end":192,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1692},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472753,"byte_end":472765,"line_start":196,"line_end":196,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1694},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473096,"byte_end":473115,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1696},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473503,"byte_end":473523,"line_start":209,"line_end":209,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1698},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473662,"byte_end":473676,"line_start":212,"line_end":212,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1700},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473817,"byte_end":473832,"line_start":215,"line_end":215,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1702},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473925,"byte_end":473932,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1704},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473988,"byte_end":473995,"line_start":219,"line_end":219,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1706},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474214,"byte_end":474222,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1671},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471270,"byte_end":471275,"line_start":158,"line_end":158,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339, Internal}","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1718},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474372,"byte_end":474385,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1719}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1748},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475401,"byte_end":475408,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1751},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475546,"byte_end":475558,"line_start":260,"line_end":260,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" Same to `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475488,"byte_end":475541,"line_start":259,"line_end":259,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1754},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475646,"byte_end":475651,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1757},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475787,"byte_end":475797,"line_start":265,"line_end":265,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" Same to `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475729,"byte_end":475782,"line_start":264,"line_end":264,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1760},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475976,"byte_end":475983,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1764},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476030,"byte_end":476035,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1767},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476124,"byte_end":476129,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1746},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475341,"byte_end":475345,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, OwnedLiteral, Space, OwnedSpace, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1754},{"krate":0,"index":1757},{"krate":0,"index":1760},{"krate":0,"index":1764},{"krate":0,"index":1767}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1782},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476748,"byte_end":476758,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1060},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":477994,"byte_end":478005,"line_start":319,"line_end":319,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same to `Result<T, ParseError>`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1075},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":479633,"byte_end":479639,"line_start":360,"line_end":360,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I, B> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":479572,"byte_end":479625,"line_start":359,"line_end":359,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1819},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496129,"byte_end":496135,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496044,"byte_end":496082,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1820},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496312,"byte_end":496316,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496620,"byte_end":496632,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1822},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496725,"byte_end":496737,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497004,"byte_end":497011,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1824},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497398,"byte_end":497413,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1825},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497580,"byte_end":497595,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1826},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497642,"byte_end":497647,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1827},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497802,"byte_end":497815,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1828},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497970,"byte_end":497983,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1829},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498123,"byte_end":498130,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1830},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498179,"byte_end":498186,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1831},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498280,"byte_end":498287,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1832},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498391,"byte_end":498394,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1833},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498495,"byte_end":498506,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1834},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498569,"byte_end":498580,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1835},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498635,"byte_end":498641,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1836},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498725,"byte_end":498731,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1837},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498830,"byte_end":498840,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1838},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499043,"byte_end":499052,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1839},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499131,"byte_end":499137,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500242,"byte_end":500245,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500395,"byte_end":500403,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500374,"byte_end":500383,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500652,"byte_end":500668,"line_start":152,"line_end":152,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500631,"byte_end":500640,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500976,"byte_end":500992,"line_start":159,"line_end":159,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500955,"byte_end":500964,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501290,"byte_end":501301,"line_start":166,"line_end":166,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501269,"byte_end":501278,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501559,"byte_end":501578,"line_start":172,"line_end":172,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501538,"byte_end":501547,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501895,"byte_end":501914,"line_start":179,"line_end":179,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501874,"byte_end":501883,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502211,"byte_end":502220,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502190,"byte_end":502199,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502472,"byte_end":502489,"line_start":192,"line_end":192,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502451,"byte_end":502460,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502749,"byte_end":502766,"line_start":198,"line_end":198,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502728,"byte_end":502737,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503014,"byte_end":503025,"line_start":204,"line_end":204,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502993,"byte_end":503002,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503267,"byte_end":503278,"line_start":210,"line_end":210,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503246,"byte_end":503255,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503494,"byte_end":503505,"line_start":216,"line_end":216,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503473,"byte_end":503482,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503739,"byte_end":503746,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503718,"byte_end":503727,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504032,"byte_end":504040,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504011,"byte_end":504020,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504313,"byte_end":504323,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504292,"byte_end":504301,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504680,"byte_end":504688,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504659,"byte_end":504668,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505032,"byte_end":505042,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505011,"byte_end":505020,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505281,"byte_end":505291,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505260,"byte_end":505269,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505538,"byte_end":505552,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505517,"byte_end":505526,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505801,"byte_end":505814,"line_start":271,"line_end":271,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505780,"byte_end":505789,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506026,"byte_end":506036,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506005,"byte_end":506014,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506680,"byte_end":506693,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515681,"byte_end":515694,"line_start":477,"line_end":477,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517477,"byte_end":517506,"line_start":519,"line_end":519,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":520873,"byte_end":520888,"line_start":589,"line_end":589,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521360,"byte_end":521371,"line_start":599,"line_end":599,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522399,"byte_end":522424,"line_start":619,"line_end":619,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1268},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569534,"byte_end":569539,"line_start":208,"line_end":208,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I, B> (parsed: &mut Parsed, mut s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1276},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1849},{"krate":0,"index":1856},{"krate":0,"index":1853},{"krate":0,"index":1284},{"krate":0,"index":1289},{"krate":0,"index":1290}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1849},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610575,"byte_end":610588,"line_start":166,"line_end":166,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1851},{"krate":0,"index":1852}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":611064,"byte_end":611067,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1868},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492642,"byte_end":492655,"line_start":623,"line_end":623,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492560,"byte_end":492613,"line_start":621,"line_end":621,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493179,"byte_end":493182,"line_start":637,"line_end":637,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493442,"byte_end":493457,"line_start":642,"line_end":642,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1321},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625951,"byte_end":625962,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626492,"byte_end":626505,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":627008,"byte_end":627021,"line_start":38,"line_end":38,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1321},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1878},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23950,"byte_end":23953,"line_start":570,"line_end":570,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1881},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23980,"byte_end":23983,"line_start":572,"line_end":572,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1884},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24012,"byte_end":24015,"line_start":574,"line_end":574,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1887},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24043,"byte_end":24046,"line_start":576,"line_end":576,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1890},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24072,"byte_end":24075,"line_start":578,"line_end":578,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1893},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24103,"byte_end":24106,"line_start":580,"line_end":580,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1896},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24132,"byte_end":24135,"line_start":582,"line_end":582,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1877},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23920,"byte_end":23927,"line_start":568,"line_end":568,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24454,"byte_end":24458,"line_start":592,"line_end":592,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24433,"byte_end":24442,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25111,"byte_end":25115,"line_start":610,"line_end":610,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25090,"byte_end":25099,"line_start":609,"line_end":609,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25857,"byte_end":25875,"line_start":628,"line_end":628,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25836,"byte_end":25845,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26510,"byte_end":26528,"line_start":646,"line_end":646,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26489,"byte_end":26498,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27169,"byte_end":27189,"line_start":664,"line_end":664,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27148,"byte_end":27157,"line_start":663,"line_end":663,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27830,"byte_end":27850,"line_start":682,"line_end":682,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27809,"byte_end":27818,"line_start":681,"line_end":681,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1911},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":29689,"byte_end":29706,"line_start":746,"line_end":746,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":1912}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1344},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32806,"byte_end":32814,"line_start":865,"line_end":865,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32932,"byte_end":32936,"line_start":867,"line_end":867,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33145,"byte_end":33152,"line_start":872,"line_end":872,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33128,"byte_end":33137,"line_start":871,"line_end":871,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33447,"byte_end":33452,"line_start":884,"line_end":884,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33580,"byte_end":33586,"line_start":889,"line_end":889,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33757,"byte_end":33760,"line_start":894,"line_end":894,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33931,"byte_end":33935,"line_start":899,"line_end":899,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34104,"byte_end":34111,"line_start":904,"line_end":904,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34280,"byte_end":34288,"line_start":909,"line_end":909,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34345,"byte_end":34352,"line_start":912,"line_end":912,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34410,"byte_end":34418,"line_start":915,"line_end":915,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"fn (&self) -> IsoWeek","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34576,"byte_end":34585,"line_start":920,"line_end":920,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34778,"byte_end":34788,"line_start":925,"line_end":925,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34982,"byte_end":34993,"line_start":930,"line_end":930,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35188,"byte_end":35196,"line_start":935,"line_end":935,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35388,"byte_end":35397,"line_start":940,"line_end":940,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35589,"byte_end":35601,"line_start":945,"line_end":945,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35796,"byte_end":35809,"line_start":950,"line_end":950,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36368,"byte_end":36384,"line_start":964,"line_end":964,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1344},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1363},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36919,"byte_end":36927,"line_start":980,"line_end":980,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36990,"byte_end":36994,"line_start":982,"line_end":982,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37145,"byte_end":37151,"line_start":987,"line_end":987,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37128,"byte_end":37137,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37395,"byte_end":37401,"line_start":997,"line_end":997,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37473,"byte_end":37479,"line_start":1000,"line_end":1000,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37722,"byte_end":37732,"line_start":1005,"line_end":1005,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37886,"byte_end":37895,"line_start":1010,"line_end":1010,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38071,"byte_end":38082,"line_start":1015,"line_end":1015,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38369,"byte_end":38380,"line_start":1022,"line_end":1022,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38713,"byte_end":38728,"line_start":1029,"line_end":1029,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38857,"byte_end":38882,"line_start":1033,"line_end":1033,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1363},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38840,"byte_end":38849,"line_start":1032,"line_end":1032,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43122,"byte_end":43133,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44314,"byte_end":44325,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47541,"byte_end":47552,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62901,"byte_end":62912,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65469,"byte_end":65480,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66032,"byte_end":66043,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66112,"byte_end":66123,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66617,"byte_end":66628,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67377,"byte_end":67386,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67574,"byte_end":67583,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67772,"byte_end":67785,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67981,"byte_end":67994,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68205,"byte_end":68213,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68425,"byte_end":68433,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72312,"byte_end":72317,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":73158,"byte_end":73163,"line_start":107,"line_end":107,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77392,"byte_end":77395,"line_start":36,"line_end":36,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78404,"byte_end":78407,"line_start":60,"line_end":60,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78891,"byte_end":78894,"line_start":76,"line_end":76,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78978,"byte_end":78981,"line_start":80,"line_end":80,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":79085,"byte_end":79088,"line_start":84,"line_end":84,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":85279,"byte_end":85288,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":86065,"byte_end":86074,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":94467,"byte_end":94469,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":96503,"byte_end":96505,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":97049,"byte_end":97052,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":98925,"byte_end":98928,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":116870,"byte_end":116879,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150569,"byte_end":150578,"line_start":969,"line_end":969,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":162910,"byte_end":162919,"line_start":1336,"line_end":1336,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":163138,"byte_end":163147,"line_start":1345,"line_end":1345,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164558,"byte_end":164567,"line_start":1378,"line_end":1378,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164786,"byte_end":164795,"line_start":1387,"line_end":1387,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":166051,"byte_end":166060,"line_start":1421,"line_end":1421,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":167049,"byte_end":167058,"line_start":1452,"line_end":1452,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168313,"byte_end":168322,"line_start":1487,"line_end":1487,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168912,"byte_end":168921,"line_start":1507,"line_end":1507,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197758,"byte_end":197765,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":200307,"byte_end":200314,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209171,"byte_end":209180,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":523},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233449,"byte_end":233458,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":240672,"byte_end":240681,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243688,"byte_end":243697,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243878,"byte_end":243887,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246486,"byte_end":246495,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246676,"byte_end":246685,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":249220,"byte_end":249229,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":250613,"byte_end":250622,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":252471,"byte_end":252480,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":253240,"byte_end":253249,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274042,"byte_end":274055,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300483,"byte_end":300496,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":311552,"byte_end":311565,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":317826,"byte_end":317839,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320454,"byte_end":320467,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320698,"byte_end":320711,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323218,"byte_end":323231,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323462,"byte_end":323475,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":325413,"byte_end":325426,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":326630,"byte_end":326643,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":327735,"byte_end":327748,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":328486,"byte_end":328499,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367186,"byte_end":367190,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375308,"byte_end":375312,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":376154,"byte_end":376158,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377849,"byte_end":377853,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377933,"byte_end":377937,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378042,"byte_end":378046,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378154,"byte_end":378158,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378202,"byte_end":378206,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378358,"byte_end":378362,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378485,"byte_end":378489,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378616,"byte_end":378620,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378844,"byte_end":378848,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379069,"byte_end":379073,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379258,"byte_end":379262,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379436,"byte_end":379440,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381978,"byte_end":381986,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388106,"byte_end":388114,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388618,"byte_end":388626,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389036,"byte_end":389044,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389494,"byte_end":389502,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389948,"byte_end":389956,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":390392,"byte_end":390400,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391119,"byte_end":391127,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393409,"byte_end":393417,"line_start":373,"line_end":373,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":918},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397929,"byte_end":397937,"line_start":482,"line_end":482,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":939},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":399650,"byte_end":399658,"line_start":529,"line_end":529,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400634,"byte_end":400642,"line_start":557,"line_end":557,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400722,"byte_end":400730,"line_start":558,"line_end":558,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400839,"byte_end":400847,"line_start":560,"line_end":560,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400967,"byte_end":400975,"line_start":564,"line_end":564,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401019,"byte_end":401027,"line_start":567,"line_end":567,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401191,"byte_end":401199,"line_start":573,"line_end":573,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401334,"byte_end":401342,"line_start":577,"line_end":577,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401473,"byte_end":401481,"line_start":581,"line_end":581,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401717,"byte_end":401725,"line_start":590,"line_end":590,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401962,"byte_end":401970,"line_start":599,"line_end":599,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402159,"byte_end":402167,"line_start":608,"line_end":608,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402341,"byte_end":402349,"line_start":614,"line_end":614,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402537,"byte_end":402545,"line_start":620,"line_end":620,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403731,"byte_end":403739,"line_start":647,"line_end":647,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403963,"byte_end":403971,"line_start":656,"line_end":656,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404216,"byte_end":404224,"line_start":665,"line_end":665,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404859,"byte_end":404867,"line_start":684,"line_end":684,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":405066,"byte_end":405076,"line_start":691,"line_end":691,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470655,"byte_end":470670,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470760,"byte_end":470775,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470881,"byte_end":470896,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470922,"byte_end":470937,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478040,"byte_end":478050,"line_start":321,"line_end":321,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478671,"byte_end":478681,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478836,"byte_end":478846,"line_start":342,"line_end":342,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499669,"byte_end":499675,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500171,"byte_end":500177,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610954,"byte_end":610967,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":611286,"byte_end":611299,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1293}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493079,"byte_end":493092,"line_start":635,"line_end":635,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493928,"byte_end":493941,"line_start":651,"line_end":651,"column_start":77,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":494830,"byte_end":494837,"line_start":683,"line_end":683,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":627077,"byte_end":627078,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24149,"byte_end":24156,"line_start":585,"line_end":585,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28147,"byte_end":28154,"line_start":695,"line_end":695,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28802,"byte_end":28809,"line_start":712,"line_end":712,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":29748,"byte_end":29765,"line_start":750,"line_end":750,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20633,"byte_end":20639,"line_start":472,"line_end":472,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":69}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21805,"byte_end":21811,"line_start":510,"line_end":510,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1021}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492385,"byte_end":492393,"line_start":617,"line_end":617,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1276}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43122,"byte_end":43133,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44314,"byte_end":44325,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47541,"byte_end":47552,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48014,"byte_end":48019,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48022,"byte_end":48027,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48035,"byte_end":48040,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":7479},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48330,"byte_end":48335,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":104}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48338,"byte_end":48343,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":104}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62901,"byte_end":62912,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65469,"byte_end":65480,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1404},"to":{"krate":0,"index":104}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66032,"byte_end":66043,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1404},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66112,"byte_end":66123,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66617,"byte_end":66628,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67377,"byte_end":67386,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67574,"byte_end":67583,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67772,"byte_end":67785,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67981,"byte_end":67994,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68205,"byte_end":68213,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68425,"byte_end":68433,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72312,"byte_end":72317,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1417},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":73158,"byte_end":73163,"line_start":107,"line_end":107,"column_start":19,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1417},"to":{"krate":0,"index":104}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77392,"byte_end":77395,"line_start":36,"line_end":36,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78404,"byte_end":78407,"line_start":60,"line_end":60,"column_start":19,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1424},"to":{"krate":0,"index":104}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78891,"byte_end":78894,"line_start":76,"line_end":76,"column_start":17,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1424},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78978,"byte_end":78981,"line_start":80,"line_end":80,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":79085,"byte_end":79088,"line_start":84,"line_end":84,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":85279,"byte_end":85288,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":86065,"byte_end":86074,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1433},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":94467,"byte_end":94469,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":96503,"byte_end":96505,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1444},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":97049,"byte_end":97052,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":98925,"byte_end":98928,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1459},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":116870,"byte_end":116879,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150569,"byte_end":150578,"line_start":969,"line_end":969,"column_start":19,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1474},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":162910,"byte_end":162919,"line_start":1336,"line_end":1336,"column_start":27,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":163138,"byte_end":163147,"line_start":1345,"line_end":1345,"column_start":33,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":1628}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164558,"byte_end":164567,"line_start":1378,"line_end":1378,"column_start":27,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164786,"byte_end":164795,"line_start":1387,"line_end":1387,"column_start":33,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":166051,"byte_end":166060,"line_start":1421,"line_end":1421,"column_start":25,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":167049,"byte_end":167058,"line_start":1452,"line_end":1452,"column_start":21,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168313,"byte_end":168322,"line_start":1487,"line_end":1487,"column_start":23,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168912,"byte_end":168921,"line_start":1507,"line_end":1507,"column_start":23,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197758,"byte_end":197765,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":200307,"byte_end":200314,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1495},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209171,"byte_end":209180,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233449,"byte_end":233458,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1513},"to":{"krate":0,"index":1363}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":240672,"byte_end":240681,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":7121}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243688,"byte_end":243697,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243878,"byte_end":243887,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1628}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246486,"byte_end":246495,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246676,"byte_end":246685,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":249220,"byte_end":249229,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":250613,"byte_end":250622,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":252471,"byte_end":252480,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":253240,"byte_end":253249,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274042,"byte_end":274055,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300483,"byte_end":300496,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1536},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":311552,"byte_end":311565,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1536},"to":{"krate":0,"index":1363}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":317826,"byte_end":317839,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":7121}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320454,"byte_end":320467,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320698,"byte_end":320711,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":1628}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323218,"byte_end":323231,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323462,"byte_end":323475,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":325413,"byte_end":325426,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":326630,"byte_end":326643,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":327735,"byte_end":327748,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":328486,"byte_end":328499,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1536},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367186,"byte_end":367190,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375308,"byte_end":375312,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":376154,"byte_end":376158,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1559},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377849,"byte_end":377853,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":1542}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377933,"byte_end":377937,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":1534}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378042,"byte_end":378046,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378154,"byte_end":378158,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378202,"byte_end":378206,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378358,"byte_end":378362,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378485,"byte_end":378489,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":7121}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378616,"byte_end":378620,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378844,"byte_end":378848,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379069,"byte_end":379073,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379258,"byte_end":379262,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379436,"byte_end":379440,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1559},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381978,"byte_end":381986,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388106,"byte_end":388114,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388618,"byte_end":388626,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389036,"byte_end":389044,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389494,"byte_end":389502,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389948,"byte_end":389956,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":390392,"byte_end":390400,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391119,"byte_end":391127,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393409,"byte_end":393417,"line_start":373,"line_end":373,"column_start":20,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397929,"byte_end":397937,"line_start":482,"line_end":482,"column_start":33,"column_end":41},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1588},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":399650,"byte_end":399658,"line_start":529,"line_end":529,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1588},"to":{"krate":0,"index":1363}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400634,"byte_end":400642,"line_start":557,"line_end":557,"column_start":29,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":1542}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400722,"byte_end":400730,"line_start":558,"line_end":558,"column_start":36,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":1534}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400839,"byte_end":400847,"line_start":560,"line_end":560,"column_start":64,"column_end":72},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400967,"byte_end":400975,"line_start":564,"line_end":564,"column_start":27,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401019,"byte_end":401027,"line_start":567,"line_end":567,"column_start":35,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401191,"byte_end":401199,"line_start":573,"line_end":573,"column_start":28,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401334,"byte_end":401342,"line_start":577,"line_end":577,"column_start":35,"column_end":43},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":7121}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401473,"byte_end":401481,"line_start":581,"line_end":581,"column_start":41,"column_end":49},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":1595}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401717,"byte_end":401725,"line_start":590,"line_end":590,"column_start":41,"column_end":49},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401962,"byte_end":401970,"line_start":599,"line_end":599,"column_start":42,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":1600}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402159,"byte_end":402167,"line_start":608,"line_end":608,"column_start":35,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402341,"byte_end":402349,"line_start":614,"line_end":614,"column_start":37,"column_end":45},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402537,"byte_end":402545,"line_start":620,"line_end":620,"column_start":23,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403731,"byte_end":403739,"line_start":647,"line_end":647,"column_start":23,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403963,"byte_end":403971,"line_start":656,"line_end":656,"column_start":23,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404216,"byte_end":404224,"line_start":665,"line_end":665,"column_start":27,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404859,"byte_end":404867,"line_start":684,"line_end":684,"column_start":27,"column_end":35},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":405066,"byte_end":405076,"line_start":691,"line_end":691,"column_start":43,"column_end":53},"kind":{"Impl":{"id":105}},"from":{"krate":1,"index":7557},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470655,"byte_end":470670,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470760,"byte_end":470775,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470881,"byte_end":470896,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470922,"byte_end":470937,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478040,"byte_end":478050,"line_start":321,"line_end":321,"column_start":6,"column_end":16},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478671,"byte_end":478681,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1782},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478836,"byte_end":478846,"line_start":342,"line_end":342,"column_start":16,"column_end":26},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1782},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499669,"byte_end":499675,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1819},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500171,"byte_end":500177,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610954,"byte_end":610967,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":611286,"byte_end":611299,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1849},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493079,"byte_end":493092,"line_start":635,"line_end":635,"column_start":60,"column_end":73},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1868},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493928,"byte_end":493941,"line_start":651,"line_end":651,"column_start":77,"column_end":90},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1868},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":494830,"byte_end":494837,"line_start":683,"line_end":683,"column_start":18,"column_end":25},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1877},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":627077,"byte_end":627078,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1325},"to":{"krate":0,"index":1321}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24149,"byte_end":24156,"line_start":585,"line_end":585,"column_start":6,"column_end":13},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28147,"byte_end":28154,"line_start":695,"line_end":695,"column_start":23,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1877},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28802,"byte_end":28809,"line_start":712,"line_end":712,"column_start":36,"column_end":43},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1877},"to":{"krate":18,"index":152}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":29748,"byte_end":29765,"line_start":750,"line_end":750,"column_start":21,"column_end":38},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1911},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32816,"byte_end":32821,"line_start":865,"line_end":865,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":1344}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36929,"byte_end":36934,"line_start":980,"line_end":980,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":1363}}]}