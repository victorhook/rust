{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3","program":"/home/victor/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","image","/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"gif\"","--cfg","feature=\"gif_codec\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg-decoder\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"png\"","--cfg","feature=\"png_codec\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=7b579018f6926ee1","-C","extra-filename=-7b579018f6926ee1","--out-dir","/home/victor/coding/rust/game/target/rls/debug/deps","-L","dependency=/home/victor/coding/rust/game/target/rls/debug/deps","--extern","byteorder=/home/victor/coding/rust/game/target/rls/debug/deps/libbyteorder-17553229e1c57d1d.rmeta","--extern","gif=/home/victor/coding/rust/game/target/rls/debug/deps/libgif-0aa5f7b7e63559e5.rmeta","--extern","jpeg_decoder=/home/victor/coding/rust/game/target/rls/debug/deps/libjpeg_decoder-09342a80e27d3afb.rmeta","--extern","num_iter=/home/victor/coding/rust/game/target/rls/debug/deps/libnum_iter-47f9a625026fca94.rmeta","--extern","num_rational=/home/victor/coding/rust/game/target/rls/debug/deps/libnum_rational-7b44e4638b22d2c0.rmeta","--extern","num_traits=/home/victor/coding/rust/game/target/rls/debug/deps/libnum_traits-367d1f9e296df8f1.rmeta","--extern","png=/home/victor/coding/rust/game/target/rls/debug/deps/libpng-5835ff7c5363f459.rmeta","--extern","scoped_threadpool=/home/victor/coding/rust/game/target/rls/debug/deps/libscoped_threadpool-a2081cf2a22928c8.rmeta","--extern","tiff=/home/victor/coding/rust/game/target/rls/debug/deps/libtiff-5be4bdd0321187cf.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/victor/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/victor/coding/rust/game/target/rls/debug/deps/libimage-7b579018f6926ee1.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[15406161354195929017,3396037204298700809]},"crate_root":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src","external_crates":[{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":15,"id":{"name":"byteorder","disambiguator":[12103544467993796305,9583536575203022875]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":16,"id":{"name":"num_iter","disambiguator":[16119878173583890082,12430039454965519611]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":17,"id":{"name":"num_integer","disambiguator":[3230067748868142271,12535569531358250893]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[10720715582030918019,14458945159501303801]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":19,"id":{"name":"num_rational","disambiguator":[13370287339867684462,9629916516241944759]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","num":20,"id":{"name":"scoped_threadpool","disambiguator":[15158512010399010126,893559039648586525]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","num":21,"id":{"name":"gif","disambiguator":[7146215087053776908,10506037428693188678]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","num":22,"id":{"name":"lzw","disambiguator":[14028001035030461771,14086932360904874791]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","num":23,"id":{"name":"color_quant","disambiguator":[502080251923879638,8579892435870502796]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":24,"id":{"name":"jpeg_decoder","disambiguator":[7530059541806170101,10679472019036421132]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":25,"id":{"name":"rayon","disambiguator":[2508750770208875920,10010762137085580744]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":26,"id":{"name":"either","disambiguator":[5040835239139670247,10922945991515109423]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":27,"id":{"name":"crossbeam_deque","disambiguator":[6731313553275130607,10201893605757963738]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":28,"id":{"name":"crossbeam_epoch","disambiguator":[15851020043137873798,5368119861816340104]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","num":29,"id":{"name":"cfg_if","disambiguator":[8192225388863340420,3173580909043468535]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":30,"id":{"name":"crossbeam_utils","disambiguator":[17496409708655812049,10531521877553013886]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":31,"id":{"name":"lazy_static","disambiguator":[2704498504070098178,6859811809661335125]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":32,"id":{"name":"memoffset","disambiguator":[15541268587432627764,3238238880198148995]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":33,"id":{"name":"scopeguard","disambiguator":[7733022297064084804,14913308311180891615]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":34,"id":{"name":"rayon_core","disambiguator":[2160390473650201113,15335192161812984036]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":35,"id":{"name":"crossbeam_queue","disambiguator":[13127198775242529567,6073619933289782014]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":36,"id":{"name":"num_cpus","disambiguator":[18207972104151191055,52021461914995799]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","num":37,"id":{"name":"libc","disambiguator":[3788287329090602773,3486361580310634080]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","num":38,"id":{"name":"png","disambiguator":[14497493989287129391,325807856204066684]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","num":39,"id":{"name":"bitflags","disambiguator":[17215305307943534339,17386179787251686105]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","num":40,"id":{"name":"crc32fast","disambiguator":[13303493224124535899,5531497097714058397]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","num":41,"id":{"name":"inflate","disambiguator":[13181476462954150601,15244145818474552826]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","num":42,"id":{"name":"adler32","disambiguator":[16771765232425908682,3231166921587129779]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","num":43,"id":{"name":"deflate","disambiguator":[15357853394483708409,5484004389223218147]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","num":44,"id":{"name":"tiff","disambiguator":[318652706909753825,18185939737839800630]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","num":45,"id":{"name":"num_derive","disambiguator":[1470605872371199915,424766411414095871]}}],"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":0,"byte_end":3470,"line_start":1,"line_end":143,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3734},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":730,"byte_end":734,"line_start":29,"line_end":29,"column_start":28,"column_end":32},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3735},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":736,"byte_end":740,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"alias_span":null,"name":"Gray","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3744},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":742,"byte_end":747,"line_start":29,"line_end":29,"column_start":40,"column_end":45},"alias_span":null,"name":"GrayA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3741},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":749,"byte_end":756,"line_start":29,"line_end":29,"column_start":47,"column_end":54},"alias_span":null,"name":"Palette","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3738},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":758,"byte_end":761,"line_start":29,"line_end":29,"column_start":56,"column_end":59},"alias_span":null,"name":"RGB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3747},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":763,"byte_end":767,"line_start":29,"line_end":29,"column_start":61,"column_end":65},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3750},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":769,"byte_end":772,"line_start":29,"line_end":29,"column_start":67,"column_end":70},"alias_span":null,"name":"BGR","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3753},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":774,"byte_end":778,"line_start":29,"line_end":29,"column_start":72,"column_end":76},"alias_span":null,"name":"BGRA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4089},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":798,"byte_end":802,"line_start":31,"line_end":31,"column_start":17,"column_end":21},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4164},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":804,"byte_end":809,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4039},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":811,"byte_end":814,"line_start":31,"line_end":31,"column_start":30,"column_end":33},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4114},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":816,"byte_end":820,"line_start":31,"line_end":31,"column_start":35,"column_end":39},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4064},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":822,"byte_end":825,"line_start":31,"line_end":31,"column_start":41,"column_end":44},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4139},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":827,"byte_end":831,"line_start":31,"line_end":31,"column_start":46,"column_end":50},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2981},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":851,"byte_end":867,"line_start":33,"line_end":33,"column_start":17,"column_end":33},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3010},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":885,"byte_end":897,"line_start":34,"line_end":34,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2997},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":915,"byte_end":931,"line_start":35,"line_end":35,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2962},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":949,"byte_end":961,"line_start":36,"line_end":36,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2975},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":979,"byte_end":994,"line_start":37,"line_end":37,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4210},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1012,"byte_end":1022,"line_start":38,"line_end":38,"column_start":17,"column_end":27},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2938},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1040,"byte_end":1051,"line_start":39,"line_end":39,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2984},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1098,"byte_end":1104,"line_start":41,"line_end":41,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3020},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1122,"byte_end":1130,"line_start":42,"line_end":42,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3111},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1165,"byte_end":1169,"line_start":44,"line_end":44,"column_start":32,"column_end":36},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3116},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1171,"byte_end":1181,"line_start":44,"line_end":44,"column_start":38,"column_end":48},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3118},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1183,"byte_end":1191,"line_start":44,"line_end":44,"column_start":50,"column_end":58},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3120},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1193,"byte_end":1201,"line_start":44,"line_end":44,"column_start":60,"column_end":68},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3112},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1203,"byte_end":1210,"line_start":44,"line_end":44,"column_start":70,"column_end":77},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3114},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1212,"byte_end":1220,"line_start":44,"line_end":44,"column_start":79,"column_end":87},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4233},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1253,"byte_end":1257,"line_start":46,"line_end":46,"column_start":30,"column_end":34},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4248},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1259,"byte_end":1262,"line_start":46,"line_end":46,"column_start":36,"column_end":39},"alias_span":null,"name":"BMP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4238},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1264,"byte_end":1267,"line_start":46,"line_end":46,"column_start":41,"column_end":44},"alias_span":null,"name":"GIF","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4250},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1269,"byte_end":1272,"line_start":46,"line_end":46,"column_start":46,"column_end":49},"alias_span":null,"name":"ICO","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4236},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1274,"byte_end":1278,"line_start":46,"line_end":46,"column_start":51,"column_end":55},"alias_span":null,"name":"JPEG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4234},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1280,"byte_end":1283,"line_start":46,"line_end":46,"column_start":57,"column_end":60},"alias_span":null,"name":"PNG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4242},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1285,"byte_end":1288,"line_start":46,"line_end":46,"column_start":62,"column_end":65},"alias_span":null,"name":"PNM","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4240},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1290,"byte_end":1294,"line_start":46,"line_end":46,"column_start":67,"column_end":71},"alias_span":null,"name":"WEBP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4263},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1313,"byte_end":1330,"line_start":48,"line_end":48,"column_start":16,"column_end":33},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2623},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1350,"byte_end":1363,"line_start":50,"line_end":50,"column_start":18,"column_end":31},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2639},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1382,"byte_end":1396,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2638},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1415,"byte_end":1424,"line_start":52,"line_end":52,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3723},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1475,"byte_end":1486,"line_start":54,"line_end":54,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2348},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1505,"byte_end":1510,"line_start":55,"line_end":55,"column_start":18,"column_end":23},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2636},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1529,"byte_end":1537,"line_start":56,"line_end":56,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2637},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1556,"byte_end":1565,"line_start":57,"line_end":57,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3127},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1584,"byte_end":1595,"line_start":59,"line_end":59,"column_start":16,"column_end":27},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3059},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1625,"byte_end":1634,"line_start":62,"line_end":62,"column_start":17,"column_end":26},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":438},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1696,"byte_end":1708,"line_start":65,"line_end":65,"column_start":30,"column_end":42},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1710,"byte_end":1714,"line_start":65,"line_end":65,"column_start":44,"column_end":48},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2912},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1736,"byte_end":1752,"line_start":66,"line_end":66,"column_start":20,"column_end":36},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2913},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1754,"byte_end":1782,"line_start":66,"line_end":66,"column_start":38,"column_end":66},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2904},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1784,"byte_end":1788,"line_start":66,"line_end":66,"column_start":68,"column_end":72},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2908},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1809,"byte_end":1820,"line_start":67,"line_end":67,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2910},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1822,"byte_end":1845,"line_start":67,"line_end":67,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2906},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1847,"byte_end":1863,"line_start":67,"line_end":67,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4189},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1900,"byte_end":1904,"line_start":69,"line_end":69,"column_start":34,"column_end":38},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4190},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1906,"byte_end":1916,"line_start":69,"line_end":69,"column_start":40,"column_end":50},"alias_span":null,"name":"ImageLuma8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4193},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1918,"byte_end":1929,"line_start":69,"line_end":69,"column_start":52,"column_end":63},"alias_span":null,"name":"ImageLumaA8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4196},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1931,"byte_end":1940,"line_start":69,"line_end":69,"column_start":65,"column_end":74},"alias_span":null,"name":"ImageRgb8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4199},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1942,"byte_end":1952,"line_start":69,"line_end":69,"column_start":76,"column_end":86},"alias_span":null,"name":"ImageRgba8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4202},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1954,"byte_end":1963,"line_start":69,"line_end":69,"column_start":88,"column_end":97},"alias_span":null,"name":"ImageBgr8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4205},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1965,"byte_end":1975,"line_start":69,"line_end":69,"column_start":99,"column_end":109},"alias_span":null,"name":"ImageBgra8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3716},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":1999,"byte_end":2004,"line_start":71,"line_end":71,"column_start":21,"column_end":26},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2294},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2006,"byte_end":2012,"line_start":71,"line_end":71,"column_start":28,"column_end":34},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3111},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18459,"byte_end":18469,"line_start":8,"line_end":8,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3116},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18507,"byte_end":18517,"line_start":10,"line_end":10,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3118},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18519,"byte_end":18527,"line_start":10,"line_end":10,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3120},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18529,"byte_end":18537,"line_start":10,"line_end":10,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3112},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18539,"byte_end":18546,"line_start":10,"line_end":10,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3114},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18548,"byte_end":18556,"line_start":10,"line_end":10,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18610,"byte_end":18625,"line_start":13,"line_end":13,"column_start":24,"column_end":39},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":184},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18627,"byte_end":18640,"line_start":13,"line_end":13,"column_start":41,"column_end":54},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":178},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18642,"byte_end":18651,"line_start":13,"line_end":13,"column_start":56,"column_end":65},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18653,"byte_end":18662,"line_start":13,"line_end":13,"column_start":67,"column_end":76},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18664,"byte_end":18672,"line_start":13,"line_end":13,"column_start":78,"column_end":86},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18718,"byte_end":18722,"line_start":16,"line_end":16,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18724,"byte_end":18733,"line_start":16,"line_end":16,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18735,"byte_end":18741,"line_start":16,"line_end":16,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18743,"byte_end":18752,"line_start":16,"line_end":16,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":330},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18754,"byte_end":18763,"line_start":16,"line_end":16,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18813,"byte_end":18821,"line_start":19,"line_end":19,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18823,"byte_end":18831,"line_start":19,"line_end":19,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":241},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18833,"byte_end":18839,"line_start":19,"line_end":19,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":205},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18841,"byte_end":18850,"line_start":19,"line_end":19,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":220},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18852,"byte_end":18861,"line_start":19,"line_end":19,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18863,"byte_end":18875,"line_start":19,"line_end":19,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":207},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18877,"byte_end":18883,"line_start":19,"line_end":19,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":3106},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18910,"byte_end":18917,"line_start":20,"line_end":20,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":225},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":18919,"byte_end":18927,"line_start":20,"line_end":20,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/mod.rs","byte_start":66872,"byte_end":66878,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":344}},{"kind":"Use","ref_id":{"krate":0,"index":693},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/mod.rs","byte_start":144803,"byte_end":144813,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPDecoder","value":"","parent":{"krate":0,"index":600}},{"kind":"Use","ref_id":{"krate":0,"index":804},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/mod.rs","byte_start":144838,"byte_end":144848,"line_start":11,"line_end":11,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":600}},{"kind":"Use","ref_id":{"krate":21,"index":292},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":233929,"byte_end":233943,"line_start":39,"line_end":39,"column_start":21,"column_end":35},"alias_span":null,"name":"DisposalMethod","value":"","parent":{"krate":0,"index":931}},{"kind":"Use","ref_id":{"krate":21,"index":355},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":233945,"byte_end":233950,"line_start":39,"line_end":39,"column_start":37,"column_end":42},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":931}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/mod.rs","byte_start":245330,"byte_end":245331,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"HDRAdapter, RGBE8Pixel, SIGNATURE, rgbe8","parent":{"krate":0,"index":1022}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/mod.rs","byte_start":245330,"byte_end":245331,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1022}},{"kind":"Use","ref_id":{"krate":0,"index":1258},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/mod.rs","byte_start":293540,"byte_end":293550,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"ICODecoder","value":"","parent":{"krate":0,"index":1233}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/mod.rs","byte_start":293575,"byte_end":293585,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1233}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/mod.rs","byte_start":306316,"byte_end":306327,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGDecoder","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1438},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/mod.rs","byte_start":306352,"byte_end":306363,"line_start":11,"line_end":11,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1636},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351446,"byte_end":351456,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMDecoder","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":1769},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351481,"byte_end":351491,"line_start":8,"line_end":8,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":3533},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351548,"byte_end":351563,"line_start":10,"line_end":10,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":3543},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351565,"byte_end":351582,"line_start":10,"line_end":10,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":3504},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351584,"byte_end":351596,"line_start":10,"line_end":10,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":3513},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351598,"byte_end":351611,"line_start":10,"line_end":10,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":3523},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351636,"byte_end":351648,"line_start":11,"line_end":11,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":1864},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351674,"byte_end":351683,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":3482},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351685,"byte_end":351695,"line_start":12,"line_end":12,"column_start":35,"column_end":45},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":3468},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":351697,"byte_end":351711,"line_start":12,"line_end":12,"column_start":47,"column_end":61},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":1554}},{"kind":"Use","ref_id":{"krate":0,"index":1957},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/mod.rs","byte_start":429952,"byte_end":429962,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TGADecoder","value":"","parent":{"krate":0,"index":1902}},{"kind":"Use","ref_id":{"krate":0,"index":2076},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/mod.rs","byte_start":451514,"byte_end":451525,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebpDecoder","value":"","parent":{"krate":0,"index":2057}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":0,"byte_end":3470,"line_start":1,"line_end":143,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":27},{"krate":0,"index":34},{"krate":0,"index":44},{"krate":0,"index":51},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":82},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":135},{"krate":0,"index":344},{"krate":0,"index":443},{"krate":0,"index":600},{"krate":0,"index":819},{"krate":0,"index":931},{"krate":0,"index":1022},{"krate":0,"index":1233},{"krate":0,"index":1334},{"krate":0,"index":1498},{"krate":0,"index":1554},{"krate":0,"index":1902},{"krate":0,"index":2005},{"krate":0,"index":2057},{"krate":0,"index":2289},{"krate":0,"index":2313},{"krate":0,"index":2642},{"krate":0,"index":2794},{"krate":0,"index":2915},{"krate":0,"index":3053},{"krate":0,"index":3081},{"krate":0,"index":3093},{"krate":0,"index":4303},{"krate":0,"index":3094}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":132,"byte_end":154,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":155,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":187,"byte_end":212,"line_start":7,"line_end":7,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":213,"byte_end":233,"line_start":8,"line_end":8,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":234,"byte_end":272,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":370,"byte_end":411,"line_start":12,"line_end":12,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":93},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":132}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":3095},{"krate":0,"index":3103},{"krate":0,"index":3101},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":118}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":5777,"byte_end":5785,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":" Neural network color quantizer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":6087,"byte_end":6090,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"fn (samplefac: i32, colors: usize, pixels: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":6631,"byte_end":6635,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"fn (&mut self, pixels: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":7625,"byte_end":7634,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"fn (&self, pixel: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":7596,"byte_end":7613,"line_start":122,"line_end":122,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":8186,"byte_end":8194,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"fn (&self, pixel: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":8157,"byte_end":8174,"line_start":137,"line_end":137,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":133}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":133},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/utils.rs","byte_start":18157,"byte_end":18162,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"fn <N> (a: N, min: N, max: N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/utils.rs","byte_start":18140,"byte_end":18149,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":135},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":149},{"krate":0,"index":155},{"krate":0,"index":161},{"krate":0,"index":171},{"krate":0,"index":186},{"krate":0,"index":249},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":341}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/affine.rs","byte_start":25975,"byte_end":25983,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/affine.rs","byte_start":26436,"byte_end":26445,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/affine.rs","byte_start":26910,"byte_end":26919,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/affine.rs","byte_start":27359,"byte_end":27374,"line_start":64,"line_end":64,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/affine.rs","byte_start":27812,"byte_end":27825,"line_start":83,"line_end":83,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":214},{"krate":0,"index":220},{"krate":0,"index":225},{"krate":0,"index":3106},{"krate":0,"index":3109},{"krate":0,"index":3108},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":246}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":31904,"byte_end":31913,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"fn <I> (image: &I) -> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":32452,"byte_end":32458,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":32921,"byte_end":32929,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"fn <I, P, S> (image: &I, contrast: f32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":33904,"byte_end":33912,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":34898,"byte_end":34907,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":225},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":36821,"byte_end":36829,"line_start":180,"line_end":180,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":226},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":36893,"byte_end":36898,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":36990,"byte_end":36998,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"fn (&self, color: &Self::Color) -> usize","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Returns the index of the closed match of `color`\n in the color map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":37104,"byte_end":37113,"line_start":187,"line_end":187,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"fn (&self, color: &mut Self::Color) -> ()","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3106},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":37209,"byte_end":37216,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":39075,"byte_end":39081,"line_start":258,"line_end":258,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"fn <Pix, Map> (image: &mut ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":40626,"byte_end":40638,"line_start":296,"line_end":296,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"fn <Pix, Map> (image: &ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3112},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":41924,"byte_end":41931,"line_start":19,"line_end":19,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3114},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":41960,"byte_end":41968,"line_start":22,"line_end":22,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3116},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":41996,"byte_end":42006,"line_start":25,"line_end":25,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3118},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":42037,"byte_end":42045,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3120},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":42082,"byte_end":42090,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3111},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":41882,"byte_end":41892,"line_start":17,"line_end":17,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"FilterType::{Nearest, Triangle, CatmullRom, Gaussian, Lanczos3}","parent":null,"children":[{"krate":0,"index":3112},{"krate":0,"index":3114},{"krate":0,"index":3116},{"krate":0,"index":3118},{"krate":0,"index":3120}],"decl_id":null,"docs":" Available Sampling Filters\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":51552,"byte_end":51561,"line_start":328,"line_end":328,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"fn <I, P, S> (image: &I, new_width: u32, new_height: u32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":320},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":59441,"byte_end":59450,"line_start":567,"line_end":567,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"fn <I, P, S> (image: &I, kernel: &[f32]) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":325},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":61877,"byte_end":61883,"line_start":647,"line_end":647,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"fn <I> (image: &I, nwidth: u32, nheight: u32, filter: FilterType) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":63009,"byte_end":63013,"line_start":686,"line_end":686,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"fn <I> (image: &I, sigma: f32) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":330},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":63836,"byte_end":63845,"line_start":713,"line_end":713,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"fn <I, P, S> (image: &I, sigma: f32, threshold: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":335},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":19107,"byte_end":19111,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"fn <I> (image: &mut I, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":337},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":21673,"byte_end":21687,"line_start":102,"line_end":102,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"fn ((bottom_width, bottom_height): (u32, u32), (top_width, top_height): (u32, u32), x: u32, y: u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":338},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":22202,"byte_end":22209,"line_start":120,"line_end":120,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":341},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":22941,"byte_end":22948,"line_start":143,"line_end":143,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":344},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":387},{"krate":0,"index":442}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":68904,"byte_end":68910,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":69410,"byte_end":69413,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"fn (reader: R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":69583,"byte_end":69594,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"fn (reader: R, format: ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":69788,"byte_end":69794,"line_start":91,"line_end":91,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"fn (&self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":69929,"byte_end":69939,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"fn (&mut self, format: ImageFormat) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":70274,"byte_end":70286,"line_start":104,"line_end":104,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":70373,"byte_end":70383,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":70845,"byte_end":70849,"line_start":123,"line_end":123,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"fn <P> (path: P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":72481,"byte_end":72500,"line_start":165,"line_end":165,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"fn (mut self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":73463,"byte_end":73478,"line_start":191,"line_end":191,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"fn (mut self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":73877,"byte_end":73883,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"fn (mut self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":423},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/free_functions.rs","byte_start":75494,"byte_end":75498,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"fn <R> (r: R, format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/free_functions.rs","byte_start":84570,"byte_end":84582,"line_start":270,"line_end":270,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"fn (buffer: &[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":443},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":3127},{"krate":0,"index":3135},{"krate":0,"index":3132},{"krate":0,"index":3138},{"krate":0,"index":3156},{"krate":0,"index":3155},{"krate":0,"index":3153},{"krate":0,"index":3150},{"krate":0,"index":3148},{"krate":0,"index":3145},{"krate":0,"index":3158},{"krate":0,"index":3182},{"krate":0,"index":3181},{"krate":0,"index":3179},{"krate":0,"index":3176},{"krate":0,"index":3174},{"krate":0,"index":3164},{"krate":0,"index":3162},{"krate":0,"index":459},{"krate":0,"index":482},{"krate":0,"index":486},{"krate":0,"index":3184},{"krate":0,"index":3193},{"krate":0,"index":3189},{"krate":0,"index":3197},{"krate":0,"index":3206},{"krate":0,"index":3202},{"krate":0,"index":3210},{"krate":0,"index":3230},{"krate":0,"index":3229},{"krate":0,"index":3227},{"krate":0,"index":3224},{"krate":0,"index":3222},{"krate":0,"index":3219},{"krate":0,"index":3232},{"krate":0,"index":3253},{"krate":0,"index":3252},{"krate":0,"index":3250},{"krate":0,"index":3248},{"krate":0,"index":3246},{"krate":0,"index":3243},{"krate":0,"index":528},{"krate":0,"index":541},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":576},{"krate":0,"index":588},{"krate":0,"index":596},{"krate":0,"index":598}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3127},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":87576,"byte_end":87587,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3129},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":87665,"byte_end":87672,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":3127},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3130},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":87756,"byte_end":87762,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":3127},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3131},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88217,"byte_end":88227,"line_start":78,"line_end":78,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":3127},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3138},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88377,"byte_end":88389,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":3139},{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3142},{"krate":0,"index":3143},{"krate":0,"index":3144}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88304,"byte_end":88314,"line_start":82,"line_end":82,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3139},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88473,"byte_end":88481,"line_start":86,"line_end":86,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3140},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88567,"byte_end":88581,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3141},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88643,"byte_end":88648,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3142},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88735,"byte_end":88747,"line_start":95,"line_end":95,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3143},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88810,"byte_end":88816,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3144},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":88903,"byte_end":88916,"line_start":101,"line_end":101,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":89891,"byte_end":89907,"line_start":125,"line_end":125,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":91158,"byte_end":91177,"line_start":154,"line_end":154,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":91793,"byte_end":91804,"line_start":171,"line_end":171,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":92121,"byte_end":92128,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":92502,"byte_end":92508,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":94663,"byte_end":94673,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n \n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":95005,"byte_end":95009,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":96127,"byte_end":96146,"line_start":277,"line_end":277,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":97391,"byte_end":97400,"line_start":307,"line_end":307,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":99110,"byte_end":99119,"line_start":362,"line_end":362,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":99393,"byte_end":99398,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":99992,"byte_end":100013,"line_start":382,"line_end":382,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":100944,"byte_end":100959,"line_start":403,"line_end":403,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"fn (&self, c: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":101487,"byte_end":101496,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":102169,"byte_end":102180,"line_start":441,"line_end":441,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":102462,"byte_end":102469,"line_start":449,"line_end":449,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":102797,"byte_end":102803,"line_start":457,"line_end":457,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":102917,"byte_end":102923,"line_start":462,"line_end":462,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"fn <T> (&self) -> FlatSamples<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":103197,"byte_end":103203,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"fn <T> (&mut self) -> FlatSamples<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":103482,"byte_end":103488,"line_start":480,"line_end":480,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"fn <T> (&self) -> FlatSamples<Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":104764,"byte_end":104774,"line_start":511,"line_end":511,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"fn <T> (&self, channel: u8, x: u32, y: u32) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":106373,"byte_end":106387,"line_start":544,"line_end":544,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"fn <T> (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":107051,"byte_end":107058,"line_start":559,"line_end":559,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"fn <P> (&self) -> Result<View<&[P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":108636,"byte_end":108660,"line_start":596,"line_end":596,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"fn <P> (&mut self) -> Result<View<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":110023,"byte_end":110034,"line_start":629,"line_end":629,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"fn <P> (&mut self) -> Result<ViewMut<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":111031,"byte_end":111039,"line_start":659,"line_end":659,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"fn <T> (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":111350,"byte_end":111362,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"fn <T> (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":111793,"byte_end":111804,"line_start":676,"line_end":676,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"fn <T> (&self) -> Option<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":112221,"byte_end":112236,"line_start":691,"line_end":691,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"fn <T> (&mut self) -> Option<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":112890,"byte_end":112905,"line_start":710,"line_end":710,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"fn <P> (self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":115745,"byte_end":115755,"line_start":784,"line_end":784,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n \n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":115892,"byte_end":115896,"line_start":789,"line_end":789,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":116317,"byte_end":116336,"line_start":798,"line_end":798,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":116917,"byte_end":116926,"line_start":809,"line_end":809,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":117351,"byte_end":117360,"line_start":818,"line_end":818,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":117610,"byte_end":117615,"line_start":825,"line_end":825,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":118094,"byte_end":118115,"line_start":834,"line_end":834,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":118547,"byte_end":118562,"line_start":843,"line_end":843,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"fn (&self, channel: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":118997,"byte_end":119006,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3184},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":119825,"byte_end":119829,"line_start":872,"line_end":872,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":3187},{"krate":0,"index":3188}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3197},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":120678,"byte_end":120685,"line_start":895,"line_end":895,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":3200},{"krate":0,"index":3201}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3211},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":121396,"byte_end":121404,"line_start":914,"line_end":914,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":3210},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3213},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":121561,"byte_end":121579,"line_start":919,"line_end":919,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":3210},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3216},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":122188,"byte_end":122198,"line_start":930,"line_end":930,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":3210},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3210},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":121261,"byte_end":121266,"line_start":910,"line_end":910,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"Error::{TooLarge, NormalFormRequired, WrongColor}","parent":null,"children":[{"krate":0,"index":3211},{"krate":0,"index":3213},{"krate":0,"index":3216}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3233},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":122698,"byte_end":122707,"line_start":943,"line_end":943,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3235},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":122937,"byte_end":122948,"line_start":949,"line_end":949,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3237},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":123232,"byte_end":123243,"line_start":956,"line_end":956,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3239},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":123454,"byte_end":123468,"line_start":962,"line_end":962,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3241},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":123685,"byte_end":123702,"line_start":968,"line_end":968,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3232},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":122458,"byte_end":122468,"line_start":938,"line_end":938,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"NormalForm::{Unaliased, PixelPacked, ImagePacked, RowMajorPacked, ColumnMajorPacked}","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3235},{"krate":0,"index":3237},{"krate":0,"index":3239},{"krate":0,"index":3241}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":123912,"byte_end":123922,"line_start":978,"line_end":978,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":124405,"byte_end":124409,"line_start":988,"line_end":988,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":124688,"byte_end":124695,"line_start":996,"line_end":996,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":125014,"byte_end":125024,"line_start":1004,"line_end":1004,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":125898,"byte_end":125912,"line_start":1022,"line_end":1022,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":126490,"byte_end":126500,"line_start":1037,"line_end":1037,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":126834,"byte_end":126845,"line_start":1045,"line_end":1045,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":127302,"byte_end":127317,"line_start":1054,"line_end":1054,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":127841,"byte_end":127850,"line_start":1066,"line_end":1066,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":128835,"byte_end":128846,"line_start":1088,"line_end":1088,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"fn (self) -> Result<ViewMut<Buffer, P>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":129489,"byte_end":129499,"line_start":1110,"line_end":1110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":129983,"byte_end":129987,"line_start":1120,"line_end":1120,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":130360,"byte_end":130367,"line_start":1129,"line_end":1129,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":130609,"byte_end":130619,"line_start":1136,"line_end":1136,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":130930,"byte_end":130940,"line_start":1144,"line_end":1144,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":131565,"byte_end":131579,"line_start":1160,"line_end":1160,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":132190,"byte_end":132201,"line_start":1174,"line_end":1174,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":132400,"byte_end":132415,"line_start":1179,"line_end":1179,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":132883,"byte_end":132892,"line_start":1189,"line_end":1189,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":600},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":793}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2188,"byte_end":2211,"line_start":86,"line_end":86,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":693},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":158055,"byte_end":158065,"line_start":428,"line_end":428,"column_start":12,"column_end":22},"name":"BMPDecoder","qualname":"::bmp::decoder::BMPDecoder","value":"BMPDecoder {  }","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":160633,"byte_end":160636,"line_start":515,"line_end":515,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<BMPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":171197,"byte_end":171224,"line_start":814,"line_end":814,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BMPDecoder<R>>::read_metadata_in_ico_format","value":"fn (&mut self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":171143,"byte_end":171166,"line_start":812,"line_end":812,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":771},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":191027,"byte_end":191036,"line_start":1286,"line_end":1286,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":804},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/encoder.rs","byte_start":193672,"byte_end":193682,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BMPEncoder {  }","parent":null,"children":[{"krate":0,"index":807}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/encoder.rs","byte_start":193841,"byte_end":193844,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPEncoder>::new","value":"fn (w: &'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/encoder.rs","byte_start":194052,"byte_end":194058,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"encode","qualname":"<BMPEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":819},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::dxt","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":3329},{"krate":0,"index":3343},{"krate":0,"index":3342},{"krate":0,"index":3340},{"krate":0,"index":3338},{"krate":0,"index":3336},{"krate":0,"index":835},{"krate":0,"index":839},{"krate":0,"index":846},{"krate":0,"index":850},{"krate":0,"index":859},{"krate":0,"index":866},{"krate":0,"index":870},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":915},{"krate":0,"index":919},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":929}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2225,"byte_end":2248,"line_start":88,"line_end":88,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3330},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":205244,"byte_end":205248,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3332},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":205379,"byte_end":205383,"line_start":25,"line_end":25,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3334},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":205514,"byte_end":205518,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3329},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":205103,"byte_end":205113,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::dxt::DXTVariant","value":"DXTVariant::{DXT1, DXT3, DXT5}","parent":null,"children":[{"krate":0,"index":3330},{"krate":0,"index":3332},{"krate":0,"index":3334}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":206138,"byte_end":206147,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"colortype","qualname":"<DXTVariant>::colortype","value":"fn (self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the colortype that is stored in this DXT variant\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":839},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":206358,"byte_end":206368,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"DXTDecoder","qualname":"::dxt::DXTDecoder","value":"DXTDecoder {  }","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":206948,"byte_end":206951,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTDecoder<R>>::new","value":"fn (r: R, width: u32, height: u32, variant: DXTVariant) -> Result<DXTDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":866},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210207,"byte_end":210216,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"DXTReader","qualname":"::dxt::DXTReader","value":"DXTReader {  }","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210528,"byte_end":210538,"line_start":190,"line_end":190,"column_start":12,"column_end":22},"name":"DXTEncoder","qualname":"::dxt::DXTEncoder","value":"DXTEncoder {  }","parent":null,"children":[{"krate":0,"index":876}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210669,"byte_end":210672,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTEncoder<W>>::new","value":"fn (w: W) -> DXTEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210935,"byte_end":210941,"line_start":204,"line_end":204,"column_start":12,"column_end":18},"name":"encode","qualname":"<DXTEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, variant: DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.colortype()\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":931},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":972},{"krate":0,"index":976},{"krate":0,"index":985},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1004},{"krate":0,"index":1008},{"krate":0,"index":1019}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2262,"byte_end":2291,"line_start":90,"line_end":90,"column_start":1,"column_end":30}},{"value":"allow(clippy :: while_let_loop)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":233655,"byte_end":233688,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":961},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":234154,"byte_end":234161,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::gif::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":963}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":234309,"byte_end":234312,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<R>>::new","value":"fn (r: R) -> ImageResult<Decoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":967},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":234577,"byte_end":234586,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1004},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":242432,"byte_end":242439,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::gif::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":242589,"byte_end":242592,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"fn (w: W) -> Encoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":242740,"byte_end":242746,"line_start":306,"line_end":306,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder<W>>::encode","value":"fn (&mut self, frame: &Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes a frame.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":243391,"byte_end":243404,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<Encoder<W>>::encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":243889,"byte_end":243906,"line_start":334,"line_end":334,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<Encoder<W>>::try_encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1022},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::hdr","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/mod.rs","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1181},{"krate":0,"index":1231},{"krate":0,"index":1232}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2305,"byte_end":2328,"line_start":92,"line_end":92,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":3345},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":245862,"byte_end":245872,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"HDRAdapter","qualname":"::hdr::decoder::HDRAdapter","value":"HDRAdapter {  }","parent":null,"children":[{"krate":0,"index":3347},{"krate":0,"index":3348},{"krate":0,"index":3349}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":246042,"byte_end":246045,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<HDRAdapter<R>>::new","value":"fn (r: R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":246342,"byte_end":246355,"line_start":38,"line_end":38,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HDRAdapter<R>>::new_nonstrict","value":"fn (r: R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1055},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":247347,"byte_end":247356,"line_start":70,"line_end":70,"column_start":12,"column_end":21},"name":"HdrReader","qualname":"::hdr::decoder::HdrReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1079},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249167,"byte_end":249176,"line_start":142,"line_end":142,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3353},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249294,"byte_end":249304,"line_start":147,"line_end":147,"column_start":12,"column_end":22},"name":"HDRDecoder","qualname":"::hdr::decoder::HDRDecoder","value":"HDRDecoder {  }","parent":null,"children":[{"krate":0,"index":3355},{"krate":0,"index":3356},{"krate":0,"index":3357},{"krate":0,"index":3358}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3362},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249529,"byte_end":249539,"line_start":157,"line_end":157,"column_start":12,"column_end":22},"name":"RGBE8Pixel","qualname":"::hdr::decoder::RGBE8Pixel","value":"RGBE8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":3363},{"krate":0,"index":3365}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249453,"byte_end":249463,"line_start":155,"line_end":155,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3363},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249575,"byte_end":249576,"line_start":159,"line_end":159,"column_start":9,"column_end":10},"name":"c","qualname":"::hdr::decoder::RGBE8Pixel::c","value":"[u8; _]","parent":{"krate":0,"index":3362},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3365},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249612,"byte_end":249613,"line_start":161,"line_end":161,"column_start":9,"column_end":10},"name":"e","qualname":"::hdr::decoder::RGBE8Pixel::e","value":"u8","parent":{"krate":0,"index":3362},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1081},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249674,"byte_end":249679,"line_start":165,"line_end":165,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::hdr::decoder::rgbe8","value":"fn (r: u8, g: u8, b: u8, e: u8) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```RGBE8Pixel``` from components\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249868,"byte_end":249874,"line_start":172,"line_end":172,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<RGBE8Pixel>::to_hdr","value":"fn (self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249847,"byte_end":249856,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":250634,"byte_end":250640,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<RGBE8Pixel>::to_ldr","value":"fn <T> (self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":250613,"byte_end":250622,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":251026,"byte_end":251044,"line_start":207,"line_end":207,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<RGBE8Pixel>::to_ldr_scale_gamma","value":"fn <T> (self, scale: f32, gamma: f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":251005,"byte_end":251014,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":252228,"byte_end":252231,"line_start":238,"line_end":238,"column_start":12,"column_end":15},"name":"new","qualname":"<HDRDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<HDRDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HDRDecoder\n strict mode is enabled\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":252639,"byte_end":252654,"line_start":249,"line_end":249,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HDRDecoder<R>>::with_strictness","value":"fn (mut reader: R, strict: bool) -> ImageResult<HDRDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HDRDecoder```.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":255304,"byte_end":255312,"line_start":318,"line_end":318,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HDRDecoder<R>>::metadata","value":"fn (&self) -> HDRMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HDRMetadata``` for details.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":255443,"byte_end":255460,"line_start":323,"line_end":323,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HDRDecoder<R>>::read_image_native","value":"fn (mut self) -> ImageResult<Vec<RGBE8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":256093,"byte_end":256113,"line_start":338,"line_end":338,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HDRDecoder<R>>::read_image_transform","value":"fn <T, F> (mut self, f: F, output_slice: &mut [T]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":257252,"byte_end":257266,"line_start":374,"line_end":374,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HDRDecoder<R>>::read_image_ldr","value":"fn (self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":257570,"byte_end":257584,"line_start":382,"line_end":382,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HDRDecoder<R>>::read_image_hdr","value":"fn (self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1111},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":258395,"byte_end":258418,"line_start":407,"line_end":407,"column_start":12,"column_end":35},"name":"HDRImageDecoderIterator","qualname":"::hdr::decoder::HDRImageDecoderIterator","value":"HDRImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3380},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":266176,"byte_end":266187,"line_start":639,"line_end":639,"column_start":12,"column_end":23},"name":"HDRMetadata","qualname":"::hdr::decoder::HDRMetadata","value":"HDRMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":3381},{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3387}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3381},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":266325,"byte_end":266330,"line_start":642,"line_end":642,"column_start":9,"column_end":14},"name":"width","qualname":"::hdr::decoder::HDRMetadata::width","value":"u32","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3382},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":266409,"byte_end":266415,"line_start":644,"line_end":644,"column_start":9,"column_end":15},"name":"height","qualname":"::hdr::decoder::HDRMetadata::height","value":"u32","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3383},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":266690,"byte_end":266701,"line_start":648,"line_end":648,"column_start":9,"column_end":20},"name":"orientation","qualname":"::hdr::decoder::HDRMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3384},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":266926,"byte_end":266934,"line_start":653,"line_end":653,"column_start":9,"column_end":17},"name":"exposure","qualname":"::hdr::decoder::HDRMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3385},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":267178,"byte_end":267194,"line_start":658,"line_end":658,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::hdr::decoder::HDRMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3386},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":267273,"byte_end":267291,"line_start":660,"line_end":660,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::hdr::decoder::HDRMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3387},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":267520,"byte_end":267537,"line_start":664,"line_end":664,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::hdr::decoder::HDRMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1174},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":277383,"byte_end":277396,"line_start":923,"line_end":923,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::hdr::decoder::read_raw_file","value":"fn <P> (path: P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1191},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":278172,"byte_end":278182,"line_start":7,"line_end":7,"column_start":12,"column_end":22},"name":"HDREncoder","qualname":"::hdr::encoder::HDREncoder","value":"HDREncoder {  }","parent":null,"children":[{"krate":0,"index":1193}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":278274,"byte_end":278277,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"new","qualname":"<HDREncoder<W>>::new","value":"fn (w: W) -> HDREncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":278440,"byte_end":278446,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"encode","qualname":"<HDREncoder<W>>::encode","value":"fn (mut self, data: &[Rgb<f32>], width: usize, height: usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1229},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":285871,"byte_end":285879,"line_start":227,"line_end":227,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::hdr::encoder::to_rgbe8","value":"fn (pix: Rgb<f32>) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```RGBE8Pixel```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1233},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/mod.rs","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1307}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2342,"byte_end":2365,"line_start":94,"line_end":94,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1258},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":294127,"byte_end":294137,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"ICODecoder","qualname":"::ico::decoder::ICODecoder","value":"ICODecoder {  }","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1261}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":294635,"byte_end":294638,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<ICODecoder<R>>::new","value":"fn (mut r: R) -> ImageResult<ICODecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1290},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":298228,"byte_end":298237,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1321},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/encoder.rs","byte_start":303491,"byte_end":303501,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ICOEncoder","qualname":"::ico::encoder::ICOEncoder","value":"ICOEncoder {  }","parent":null,"children":[{"krate":0,"index":1323}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/encoder.rs","byte_start":303633,"byte_end":303636,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ICOEncoder<W>>::new","value":"fn (w: W) -> ICOEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/encoder.rs","byte_start":303934,"byte_end":303940,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"encode","qualname":"<ICOEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1334},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1381},{"krate":0,"index":1479},{"krate":0,"index":1482}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2379,"byte_end":2403,"line_start":96,"line_end":96,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1350},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":306632,"byte_end":306643,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"JPEGDecoder","qualname":"::jpeg::decoder::JPEGDecoder","value":"JPEGDecoder {  }","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":306838,"byte_end":306841,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGDecoder<R>>::new","value":"fn (r: R) -> ImageResult<JPEGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1357},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":307392,"byte_end":307402,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1438},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":318490,"byte_end":318501,"line_start":277,"line_end":277,"column_start":12,"column_end":23},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JPEGEncoder {  }","parent":null,"children":[{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":318857,"byte_end":318860,"line_start":291,"line_end":291,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGEncoder>::new","value":"fn (w: &mut W) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":319153,"byte_end":319169,"line_start":298,"line_end":298,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JPEGEncoder>::new_with_quality","value":"fn (w: &mut W, quality: u8) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":321456,"byte_end":321462,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"encode","qualname":"<JPEGEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1498},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","parent":null,"children":[{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1509},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1521},{"krate":0,"index":1525},{"krate":0,"index":1528},{"krate":0,"index":1537},{"krate":0,"index":1540},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1551}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2418,"byte_end":2447,"line_start":98,"line_end":98,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1509},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":344294,"byte_end":344303,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"PNGReader","qualname":"::png::PNGReader","value":"PNGReader {  }","parent":null,"children":[{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513}],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1521},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":346315,"byte_end":346325,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"PNGDecoder","qualname":"::png::PNGDecoder","value":"PNGDecoder {  }","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1524}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":346502,"byte_end":346505,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGDecoder<R>>::new","value":"fn (r: R) -> ImageResult<PNGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1537},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":347686,"byte_end":347696,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PNGEncoder {  }","parent":null,"children":[{"krate":0,"index":1539}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":347827,"byte_end":347830,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGEncoder<W>>::new","value":"fn (w: W) -> PNGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":348030,"byte_end":348036,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNGEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1554},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::pnm","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/mod.rs","parent":null,"children":[{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1565},{"krate":0,"index":1569},{"krate":0,"index":1589},{"krate":0,"index":1738},{"krate":0,"index":1862}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2461,"byte_end":2484,"line_start":100,"line_end":100,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1636},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":360876,"byte_end":360886,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"PNMDecoder","qualname":"::pnm::decoder::PNMDecoder","value":"PNMDecoder {  }","parent":null,"children":[{"krate":0,"index":1638},{"krate":0,"index":1639},{"krate":0,"index":1640}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":361076,"byte_end":361079,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMDecoder<R>>::new","value":"fn (read: R) -> ImageResult<PNMDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":362548,"byte_end":362558,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PNMDecoder<R>>::into_inner","value":"fn (self) -> (R, PNMHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1673},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":374258,"byte_end":374267,"line_start":412,"line_end":412,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":376819,"byte_end":376826,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMDecoder<R>>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3457},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":397111,"byte_end":397113,"line_start":22,"line_end":22,"column_start":5,"column_end":7},"name":"U8","qualname":"::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":3455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3460},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":397129,"byte_end":397132,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"U16","qualname":"::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":3455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3455},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":397089,"byte_end":397100,"line_start":21,"line_end":21,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::pnm::encoder::FlatSamples","value":"FlatSamples::{U8, U16}","parent":null,"children":[{"krate":0,"index":3457},{"krate":0,"index":3460}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1769},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":397213,"byte_end":397223,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"name":"PNMEncoder","qualname":"::pnm::encoder::PNMEncoder","value":"PNMEncoder {  }","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":398597,"byte_end":398600,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMEncoder<W>>::new","value":"fn (writer: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":399150,"byte_end":399162,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PNMEncoder<W>>::with_subtype","value":"fn (self, subtype: PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":399868,"byte_end":399879,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PNMEncoder<W>>::with_header","value":"fn (self, header: PNMHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":400450,"byte_end":400469,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PNMEncoder<W>>::with_dynamic_header","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":400845,"byte_end":400851,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNMEncoder<W>>::encode","value":"fn <'s, S> (&mut self, image: S, width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3469},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":418613,"byte_end":418619,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3471},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":418703,"byte_end":418708,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3468},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":418533,"byte_end":418547,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::pnm::header::SampleEncoding","value":"SampleEncoding::{Binary, Ascii}","parent":null,"children":[{"krate":0,"index":3469},{"krate":0,"index":3471}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3483},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":418861,"byte_end":418867,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":3482},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3486},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":418922,"byte_end":418929,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":3482},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3489},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":418984,"byte_end":418990,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":3482},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3492},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":419037,"byte_end":419049,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":3482},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3482},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":418812,"byte_end":418822,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::pnm::header::PNMSubtype","value":"PNMSubtype::{Bitmap, Graymap, Pixmap, ArbitraryMap}","parent":null,"children":[{"krate":0,"index":3483},{"krate":0,"index":3486},{"krate":0,"index":3489},{"krate":0,"index":3492}],"decl_id":null,"docs":" Denotes the category of the magic number\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1864},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":419441,"byte_end":419450,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"PNMHeader","qualname":"::pnm::header::PNMHeader","value":"PNMHeader {  }","parent":null,"children":[{"krate":0,"index":1865},{"krate":0,"index":1866}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3504},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":419779,"byte_end":419791,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":3505},{"krate":0,"index":3506},{"krate":0,"index":3507}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3505},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":419839,"byte_end":419847,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::BitmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3504},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3506},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":419907,"byte_end":419913,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":3504},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3507},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":419961,"byte_end":419966,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":3504},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3513},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420075,"byte_end":420088,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":3514},{"krate":0,"index":3515},{"krate":0,"index":3516},{"krate":0,"index":3517}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3514},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420136,"byte_end":420144,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::GraymapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3513},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3515},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420204,"byte_end":420210,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":3513},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3516},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420258,"byte_end":420263,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":3513},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3517},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420325,"byte_end":420333,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":3513},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3523},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420443,"byte_end":420455,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":3524},{"krate":0,"index":3525},{"krate":0,"index":3526},{"krate":0,"index":3527}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3524},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420503,"byte_end":420511,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::PixmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3525},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420571,"byte_end":420577,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3526},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420625,"byte_end":420630,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3527},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420692,"byte_end":420698,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3533},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420806,"byte_end":420821,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":3534},{"krate":0,"index":3535},{"krate":0,"index":3536},{"krate":0,"index":3537},{"krate":0,"index":3538}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3534},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420865,"byte_end":420871,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3535},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420919,"byte_end":420924,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3536},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":420973,"byte_end":420978,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"name":"depth","qualname":"::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3537},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421040,"byte_end":421046,"line_start":105,"line_end":105,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3538},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421107,"byte_end":421115,"line_start":108,"line_end":108,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3544},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421318,"byte_end":421331,"line_start":115,"line_end":115,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3546},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421414,"byte_end":421432,"line_start":118,"line_end":118,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3548},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421484,"byte_end":421493,"line_start":121,"line_end":121,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3550},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421551,"byte_end":421565,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3552},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421613,"byte_end":421616,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"RGB","qualname":"::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3554},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421670,"byte_end":421678,"line_start":130,"line_end":130,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3556},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421735,"byte_end":421741,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Custom","qualname":"::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3543},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421245,"byte_end":421262,"line_start":113,"line_end":113,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::pnm::header::ArbitraryTuplType","value":"ArbitraryTuplType::{BlackAndWhite, BlackAndWhiteAlpha, Grayscale, GrayscaleAlpha, RGB, RGBAlpha, Custom}","parent":null,"children":[{"krate":0,"index":3544},{"krate":0,"index":3546},{"krate":0,"index":3548},{"krate":0,"index":3550},{"krate":0,"index":3552},{"krate":0,"index":3554},{"krate":0,"index":3556}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421862,"byte_end":421876,"line_start":138,"line_end":138,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"fn (self) -> &'static [u8; 2]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":422455,"byte_end":422470,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"fn (self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":422833,"byte_end":422840,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMHeader>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":423355,"byte_end":423360,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"width","qualname":"<PNMHeader>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":423778,"byte_end":423784,"line_start":183,"line_end":183,"column_start":12,"column_end":18},"name":"height","qualname":"<PNMHeader>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":424242,"byte_end":424256,"line_start":193,"line_end":193,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PNMHeader>::maximal_sample","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":424674,"byte_end":424683,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PNMHeader>::as_bitmap","value":"fn (&self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":424914,"byte_end":424924,"line_start":211,"line_end":211,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PNMHeader>::as_graymap","value":"fn (&self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":425158,"byte_end":425167,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PNMHeader>::as_pixmap","value":"fn (&self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":425400,"byte_end":425412,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PNMHeader>::as_arbitrary","value":"fn (&self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":425652,"byte_end":425657,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"write","qualname":"<PNMHeader>::write","value":"fn (&self, writer: &mut dyn io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1902},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/mod.rs","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1904}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2498,"byte_end":2521,"line_start":102,"line_end":102,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1957},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":434357,"byte_end":434367,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"TGADecoder","qualname":"::tga::decoder::TGADecoder","value":"TGADecoder {  }","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":434793,"byte_end":434796,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<TGADecoder<R>>::new","value":"fn (r: R) -> ImageResult<TGADecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1997},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":446839,"byte_end":446848,"line_start":527,"line_end":527,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":1999},{"krate":0,"index":2000}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2005},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","parent":null,"children":[{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2031},{"krate":0,"index":2033},{"krate":0,"index":2038},{"krate":0,"index":2042},{"krate":0,"index":2050},{"krate":0,"index":2053}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2535,"byte_end":2559,"line_start":104,"line_end":104,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2021},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":447666,"byte_end":447677,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"TIFFDecoder","qualname":"::tiff::TIFFDecoder","value":"TIFFDecoder {  }","parent":null,"children":[{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2025}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":447898,"byte_end":447901,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<TIFFDecoder<R>>::new","value":"fn (r: R) -> Result<TIFFDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TIFFDecoder.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2033},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":449282,"byte_end":449292,"line_start":70,"line_end":70,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2050},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":450435,"byte_end":450446,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":2052}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2055},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":450574,"byte_end":450577,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"fn (w: W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2056},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":450817,"byte_end":450823,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image`\n that has dimensions `width` and `height`\n and `ColorType` `c`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2057},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/mod.rs","parent":null,"children":[{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2105},{"krate":0,"index":2111}],"decl_id":null,"docs":" Decoding of Webp Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2574,"byte_end":2598,"line_start":106,"line_end":106,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2076},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":451985,"byte_end":451996,"line_start":18,"line_end":18,"column_start":12,"column_end":23},"name":"WebpDecoder","qualname":"::webp::decoder::WebpDecoder","value":"WebpDecoder {  }","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080}],"decl_id":null,"docs":" Webp Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":452208,"byte_end":452211,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<WebpDecoder<R>>::new","value":"fn (r: R) -> ImageResult<WebpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebpDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2088},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":454193,"byte_end":454203,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2111},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":3578},{"krate":0,"index":3601},{"krate":0,"index":3600},{"krate":0,"index":3598},{"krate":0,"index":3596},{"krate":0,"index":3594},{"krate":0,"index":3603},{"krate":0,"index":3623},{"krate":0,"index":3622},{"krate":0,"index":3620},{"krate":0,"index":3618},{"krate":0,"index":3616},{"krate":0,"index":3625},{"krate":0,"index":3663},{"krate":0,"index":3662},{"krate":0,"index":3660},{"krate":0,"index":3658},{"krate":0,"index":3656},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2143},{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2149},{"krate":0,"index":2153},{"krate":0,"index":2155},{"krate":0,"index":2157},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2178},{"krate":0,"index":2181},{"krate":0,"index":2183},{"krate":0,"index":3665},{"krate":0,"index":3667},{"krate":0,"index":2185},{"krate":0,"index":2187},{"krate":0,"index":2193},{"krate":0,"index":3669},{"krate":0,"index":3682},{"krate":0,"index":3678},{"krate":0,"index":3677},{"krate":0,"index":3684},{"krate":0,"index":3699},{"krate":0,"index":3697},{"krate":0,"index":3695},{"krate":0,"index":3701},{"krate":0,"index":3714},{"krate":0,"index":3713},{"krate":0,"index":3711},{"krate":0,"index":2201},{"krate":0,"index":2224},{"krate":0,"index":2250},{"krate":0,"index":2253},{"krate":0,"index":2255},{"krate":0,"index":2257},{"krate":0,"index":2259},{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2265},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3684},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":486447,"byte_end":486452,"line_start":789,"line_end":789,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692},{"krate":0,"index":3693},{"krate":0,"index":3694}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3685},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":486499,"byte_end":486504,"line_start":791,"line_end":791,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3686},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":486557,"byte_end":486563,"line_start":794,"line_end":794,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3687},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":486615,"byte_end":486619,"line_start":797,"line_end":797,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3688},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":486690,"byte_end":486698,"line_start":800,"line_end":800,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3690},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":486794,"byte_end":486805,"line_start":805,"line_end":805,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3691},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":486936,"byte_end":486946,"line_start":810,"line_end":810,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":3684},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2201},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":487322,"byte_end":487332,"line_start":838,"line_end":838,"column_start":12,"column_end":22},"name":"VP8Decoder","qualname":"::webp::vp8::VP8Decoder","value":"VP8Decoder {  }","parent":null,"children":[{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":487996,"byte_end":487999,"line_start":873,"line_end":873,"column_start":12,"column_end":15},"name":"new","qualname":"<VP8Decoder<R>>::new","value":"fn (r: R) -> VP8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":507811,"byte_end":507823,"line_start":1486,"line_end":1486,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<VP8Decoder<R>>::decode_frame","value":"fn (&mut self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2294},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525085,"byte_end":525091,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2296}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525271,"byte_end":525274,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"fn (iterator: Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525667,"byte_end":525681,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"fn (self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.\n \n Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3716},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525970,"byte_end":525975,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":3717},{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3720}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2306},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526182,"byte_end":526185,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"fn (buffer: RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2307},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526394,"byte_end":526404,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"fn (buffer: RgbaImage, left: u32, top: u32, delay: Ratio<u16>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2308},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526621,"byte_end":526626,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"fn (&self) -> Ratio<u16>","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2309},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526720,"byte_end":526726,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"fn (&self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2310},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526822,"byte_end":526833,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526922,"byte_end":526926,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2312},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":527008,"byte_end":527011,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2348},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":527631,"byte_end":527636,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::buffer::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2349},{"krate":0,"index":2350},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2375},{"krate":0,"index":2378},{"krate":0,"index":2381},{"krate":0,"index":2384},{"krate":0,"index":2386},{"krate":0,"index":2388},{"krate":0,"index":2389}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2349},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":527700,"byte_end":527708,"line_start":20,"line_end":20,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::buffer::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2350},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":527783,"byte_end":527796,"line_start":23,"line_end":23,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::buffer::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2351},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":527939,"byte_end":527952,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::buffer::Pixel::channel_count","value":"fn () -> u8","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":527865,"byte_end":527931,"line_start":25,"line_end":25,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528048,"byte_end":528056,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"channels","qualname":"::buffer::Pixel::channels","value":"fn (&self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2353},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528144,"byte_end":528156,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::buffer::Pixel::channels_mut","value":"fn (&mut self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2354},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528322,"byte_end":528333,"line_start":38,"line_end":38,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::buffer::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528550,"byte_end":528561,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"color_model","qualname":"::buffer::Pixel::color_model","value":"fn () -> &'static str","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528478,"byte_end":528542,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2356},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528665,"byte_end":528675,"line_start":47,"line_end":47,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::buffer::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528815,"byte_end":528825,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"color_type","qualname":"::buffer::Pixel::color_type","value":"fn () -> ColorType","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":528744,"byte_end":528807,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":529063,"byte_end":529072,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"channels4","qualname":"::buffer::Pixel::channels4","value":"fn (&self) -> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2359},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":529375,"byte_end":529388,"line_start":71,"line_end":71,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::buffer::Pixel::from_channels","value":"fn (a: Self::Subpixel, b: Self::Subpixel, c: Self::Subpixel, d: Self::Subpixel) -> Self","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":529742,"byte_end":529752,"line_start":82,"line_end":82,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::buffer::Pixel::from_slice","value":"fn (slice: &[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2361},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530032,"byte_end":530046,"line_start":88,"line_end":88,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::buffer::Pixel::from_slice_mut","value":"fn (slice: &mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2362},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530133,"byte_end":530139,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::buffer::Pixel::to_rgb","value":"fn (&self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2363},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530235,"byte_end":530242,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::buffer::Pixel::to_rgba","value":"fn (&self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530318,"byte_end":530325,"line_start":97,"line_end":97,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::buffer::Pixel::to_luma","value":"fn (&self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2365},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530423,"byte_end":530436,"line_start":100,"line_end":100,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::buffer::Pixel::to_luma_alpha","value":"fn (&self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530512,"byte_end":530518,"line_start":103,"line_end":103,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::buffer::Pixel::to_bgr","value":"fn (&self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2367},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530614,"byte_end":530621,"line_start":106,"line_end":106,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::buffer::Pixel::to_bgra","value":"fn (&self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2368},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530728,"byte_end":530731,"line_start":109,"line_end":109,"column_start":8,"column_end":11},"name":"map","qualname":"::buffer::Pixel::map","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2370},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":530892,"byte_end":530897,"line_start":114,"line_end":114,"column_start":8,"column_end":13},"name":"apply","qualname":"::buffer::Pixel::apply","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2372},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":531122,"byte_end":531136,"line_start":120,"line_end":120,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::buffer::Pixel::map_with_alpha","value":"fn <F, G> (&self, f: F, g: G) -> Self","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2375},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":531442,"byte_end":531458,"line_start":127,"line_end":127,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::buffer::Pixel::apply_with_alpha","value":"fn <F, G> (&mut self, f: F, g: G) -> ()","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2378},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":531692,"byte_end":531709,"line_start":133,"line_end":133,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::buffer::Pixel::map_without_alpha","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel. \n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2381},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532004,"byte_end":532023,"line_start":144,"line_end":144,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::buffer::Pixel::apply_without_alpha","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel. \n Works in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532268,"byte_end":532272,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"map2","qualname":"::buffer::Pixel::map2","value":"fn <F> (&self, other: &Self, f: F) -> Self","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532512,"byte_end":532518,"line_start":159,"line_end":159,"column_start":8,"column_end":14},"name":"apply2","qualname":"::buffer::Pixel::apply2","value":"fn <F> (&mut self, other: &Self, f: F) -> ()","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532665,"byte_end":532671,"line_start":164,"line_end":164,"column_start":8,"column_end":14},"name":"invert","qualname":"::buffer::Pixel::invert","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2389},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532782,"byte_end":532787,"line_start":167,"line_end":167,"column_start":8,"column_end":13},"name":"blend","qualname":"::buffer::Pixel::blend","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2390},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532857,"byte_end":532863,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2393}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2409},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":533632,"byte_end":533641,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":2412}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2428},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534465,"byte_end":534469,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":2431}],"decl_id":null,"docs":" Iterate over rows of an image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2447},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":535398,"byte_end":535405,"line_start":294,"line_end":294,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":2450}],"decl_id":null,"docs":" Iterate over mutable rows of an image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2466},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":536365,"byte_end":536380,"line_start":337,"line_end":337,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2483},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":537128,"byte_end":537141,"line_start":375,"line_end":375,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2488}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2499},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538004,"byte_end":538022,"line_start":418,"line_end":418,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":2502},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2516},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538787,"byte_end":538803,"line_start":456,"line_end":456,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2521}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3723},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":539688,"byte_end":539699,"line_start":500,"line_end":500,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":3726},{"krate":0,"index":3727},{"krate":0,"index":3728},{"krate":0,"index":3729}],"decl_id":null,"docs":" Generic image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":540457,"byte_end":540465,"line_start":522,"line_end":522,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"fn (width: u32, height: u32, buf: Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2536},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":540871,"byte_end":540879,"line_start":536,"line_end":536,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"fn (self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2537},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":540981,"byte_end":540991,"line_start":541,"line_end":541,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"fn (&self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2538},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":541100,"byte_end":541105,"line_start":546,"line_end":546,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":541193,"byte_end":541199,"line_start":551,"line_end":551,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":541313,"byte_end":541319,"line_start":556,"line_end":556,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"fn (&self) -> Pixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2541},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":541520,"byte_end":541524,"line_start":563,"line_end":563,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"fn (&self) -> Rows<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2542},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":541867,"byte_end":541883,"line_start":574,"line_end":574,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"fn (&self) -> EnumeratePixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":542215,"byte_end":542229,"line_start":586,"line_end":586,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"fn (&self) -> EnumerateRows<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":542550,"byte_end":542559,"line_start":599,"line_end":599,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"fn (&self, x: u32, y: u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":544285,"byte_end":544298,"line_start":640,"line_end":640,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"fn (&self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":544912,"byte_end":544929,"line_start":651,"line_end":651,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"fn (self) -> FlatSamples<Container>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":545376,"byte_end":545391,"line_start":666,"line_end":666,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":545911,"byte_end":545921,"line_start":685,"line_end":685,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"fn (&mut self) -> PixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2559},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":546144,"byte_end":546152,"line_start":692,"line_end":692,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"fn (&mut self) -> RowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":546517,"byte_end":546537,"line_start":703,"line_end":703,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"fn (&mut self) -> EnumeratePixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":546911,"byte_end":546929,"line_start":716,"line_end":716,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"fn (&mut self) -> EnumerateRowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":547292,"byte_end":547305,"line_start":730,"line_end":730,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2563},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":547754,"byte_end":547763,"line_start":742,"line_end":742,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":548178,"byte_end":548182,"line_start":756,"line_end":756,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"fn <Q> (&self, path: Q) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":548815,"byte_end":548831,"line_start":781,"line_end":781,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2617},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":553243,"byte_end":553246,"line_start":944,"line_end":944,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::new","value":"fn (width: u32, height: u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2618},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":553784,"byte_end":553794,"line_start":960,"line_end":960,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::from_pixel","value":"fn (width: u32, height: u32, pixel: P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2619},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":554309,"byte_end":554316,"line_start":975,"line_end":975,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::from_fn","value":"fn <F> (width: u32, height: u32, mut f: F) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":554727,"byte_end":554735,"line_start":988,"line_end":988,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::from_vec","value":"fn (width: u32, height: u32, buf: Vec<P::Subpixel>) -> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2622},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":555022,"byte_end":555030,"line_start":998,"line_end":998,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<<P>::Subpixel>>>::into_vec","value":"fn (self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2623},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":555158,"byte_end":555171,"line_start":1004,"line_end":1004,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":2625}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2625},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":555358,"byte_end":555365,"line_start":1009,"line_end":1009,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer::ConvertBuffer::convert","value":"fn (&self) -> T","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2627},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":555633,"byte_end":555647,"line_start":1017,"line_end":1017,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"fn (self, palette: &[(u8, u8, u8)], transparent_idx: Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2636},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":557391,"byte_end":557399,"line_start":1069,"line_end":1069,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2637},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":557488,"byte_end":557497,"line_start":1071,"line_end":1071,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2638},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":557577,"byte_end":557586,"line_start":1073,"line_end":1073,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2639},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":557682,"byte_end":557696,"line_start":1075,"line_end":1075,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3735},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561586,"byte_end":561590,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Gray","qualname":"::color::ColorType::Gray","value":"ColorType::Gray(u8)","parent":{"krate":0,"index":3734},"children":[],"decl_id":null,"docs":" Pixel is grayscale\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3738},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561644,"byte_end":561647,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"RGB","qualname":"::color::ColorType::RGB","value":"ColorType::RGB(u8)","parent":{"krate":0,"index":3734},"children":[],"decl_id":null,"docs":" Pixel contains R, G and B channels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3741},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561705,"byte_end":561712,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Palette","qualname":"::color::ColorType::Palette","value":"ColorType::Palette(u8)","parent":{"krate":0,"index":3734},"children":[],"decl_id":null,"docs":" Pixel is an index into a color palette\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3744},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561772,"byte_end":561777,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"GrayA","qualname":"::color::ColorType::GrayA","value":"ColorType::GrayA(u8)","parent":{"krate":0,"index":3734},"children":[],"decl_id":null,"docs":" Pixel is grayscale with an alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3747},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561831,"byte_end":561835,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"RGBA","qualname":"::color::ColorType::RGBA","value":"ColorType::RGBA(u8)","parent":{"krate":0,"index":3734},"children":[],"decl_id":null,"docs":" Pixel is RGB with an alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3750},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561889,"byte_end":561892,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"BGR","qualname":"::color::ColorType::BGR","value":"ColorType::BGR(u8)","parent":{"krate":0,"index":3734},"children":[],"decl_id":null,"docs":" Pixel contains B, G and R channels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3753},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561946,"byte_end":561950,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"BGRA","qualname":"::color::ColorType::BGRA","value":"ColorType::BGRA(u8)","parent":{"krate":0,"index":3734},"children":[],"decl_id":null,"docs":" Pixel is BGR with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3734},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561543,"byte_end":561552,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"ColorType::{Gray, RGB, Palette, GrayA, RGBA, BGR, BGRA}","parent":null,"children":[{"krate":0,"index":3735},{"krate":0,"index":3738},{"krate":0,"index":3741},{"krate":0,"index":3744},{"krate":0,"index":3747},{"krate":0,"index":3750},{"krate":0,"index":3753}],"decl_id":null,"docs":" An enumeration over supported color types and their bit depths\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":562064,"byte_end":562078,"line_start":36,"line_end":36,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of this `ColorType`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":562212,"byte_end":562225,"line_start":41,"line_end":41,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4039},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567386,"byte_end":567389,"line_start":232,"line_end":232,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563295,"byte_end":563305,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563306,"byte_end":563328,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4064},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567436,"byte_end":567439,"line_start":233,"line_end":233,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563295,"byte_end":563305,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563306,"byte_end":563328,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4089},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567486,"byte_end":567490,"line_start":234,"line_end":234,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563295,"byte_end":563305,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563306,"byte_end":563328,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4114},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567542,"byte_end":567546,"line_start":235,"line_end":235,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563295,"byte_end":563305,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563306,"byte_end":563328,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4139},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567611,"byte_end":567615,"line_start":236,"line_end":236,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563295,"byte_end":563305,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563306,"byte_end":563328,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4164},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567680,"byte_end":567685,"line_start":237,"line_end":237,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563295,"byte_end":563305,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":563306,"byte_end":563328,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":2658},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567826,"byte_end":567835,"line_start":241,"line_end":241,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":2660}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2660},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":567925,"byte_end":567935,"line_start":243,"line_end":243,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"fn (&mut self, &Other) -> ()","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4190},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":590175,"byte_end":590185,"line_start":37,"line_end":37,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":4189},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4193},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":590261,"byte_end":590272,"line_start":40,"line_end":40,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":4189},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4196},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":590341,"byte_end":590350,"line_start":43,"line_end":43,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":4189},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4199},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":590424,"byte_end":590434,"line_start":46,"line_end":46,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":4189},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4202},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":590498,"byte_end":590507,"line_start":49,"line_end":49,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":4189},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4205},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":590581,"byte_end":590591,"line_start":52,"line_end":52,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":4189},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4189},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":590109,"byte_end":590121,"line_start":35,"line_end":35,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"DynamicImage::{ImageLuma8, ImageLumaA8, ImageRgb8, ImageRgba8, ImageBgr8, ImageBgra8}","parent":null,"children":[{"krate":0,"index":4190},{"krate":0,"index":4193},{"krate":0,"index":4196},{"krate":0,"index":4199},{"krate":0,"index":4202},{"krate":0,"index":4205}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":593372,"byte_end":593381,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":593584,"byte_end":593595,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":593772,"byte_end":593780,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":593956,"byte_end":593965,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":594142,"byte_end":594151,"line_start":124,"line_end":124,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2835},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":594327,"byte_end":594335,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":594499,"byte_end":594511,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"fn <'a> (decoder: impl ImageDecoder<'a>) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":594689,"byte_end":594695,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"fn (&self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2840},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":594864,"byte_end":594871,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"fn (&self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":595040,"byte_end":595046,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"fn (&self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2842},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":595215,"byte_end":595222,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"fn (&self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2843},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":595391,"byte_end":595398,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"fn (&self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":595568,"byte_end":595581,"line_start":176,"line_end":176,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"fn (&self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2845},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":595777,"byte_end":595781,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2846},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":596010,"byte_end":596017,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"fn (&self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2847},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":596232,"byte_end":596243,"line_start":196,"line_end":196,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"fn (&mut self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2848},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":596462,"byte_end":596469,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"fn (&self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2849},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":596684,"byte_end":596695,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"fn (&mut self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2850},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":596915,"byte_end":596923,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"fn (&self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2851},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":597141,"byte_end":597153,"line_start":228,"line_end":228,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"fn (&mut self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":597375,"byte_end":597383,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"fn (&self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":597601,"byte_end":597613,"line_start":244,"line_end":244,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"fn (&mut self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2854},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":597840,"byte_end":597848,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"fn (&self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2855},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":598071,"byte_end":598083,"line_start":260,"line_end":260,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"fn (&mut self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2856},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":598332,"byte_end":598346,"line_start":268,"line_end":268,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"fn (&self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2857},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":598597,"byte_end":598615,"line_start":276,"line_end":276,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"fn (&mut self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2858},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":598847,"byte_end":598857,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"raw_pixels","qualname":"<DynamicImage>::raw_pixels","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2859},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":598973,"byte_end":598988,"line_start":289,"line_end":289,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<DynamicImage>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2860},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":599136,"byte_end":599141,"line_start":294,"line_end":294,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"fn (&self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2861},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":599689,"byte_end":599698,"line_start":306,"line_end":306,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2862},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":600421,"byte_end":600427,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2863},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":600791,"byte_end":600797,"line_start":327,"line_end":327,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2864},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":601261,"byte_end":601273,"line_start":337,"line_end":337,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2865},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":601964,"byte_end":601973,"line_start":354,"line_end":354,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":602581,"byte_end":602596,"line_start":366,"line_end":366,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2867},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":603116,"byte_end":603130,"line_start":376,"line_end":376,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2868},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":603950,"byte_end":603954,"line_start":399,"line_end":399,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"fn (&self, sigma: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2869},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":604332,"byte_end":604341,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"fn (&self, sigma: f32, threshold: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2870},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":604550,"byte_end":604559,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"fn (&self, kernel: &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2871},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":604969,"byte_end":604984,"line_start":424,"line_end":424,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"fn (&self, c: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2872},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":605284,"byte_end":605292,"line_start":431,"line_end":431,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2873},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":605640,"byte_end":605649,"line_start":439,"line_end":439,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2874},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":605808,"byte_end":605813,"line_start":444,"line_end":444,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2875},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":605959,"byte_end":605964,"line_start":449,"line_end":449,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2876},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":606123,"byte_end":606131,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2877},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":606284,"byte_end":606293,"line_start":459,"line_end":459,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":606447,"byte_end":606456,"line_start":464,"line_end":464,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2879},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":606611,"byte_end":606619,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"fn <W, F> (&self, w: &mut W, format: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":609846,"byte_end":609850,"line_start":559,"line_end":559,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"fn <Q> (&self, path: Q) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":610221,"byte_end":610237,"line_start":573,"line_end":573,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2904},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":616000,"byte_end":616004,"line_start":730,"line_end":730,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"fn <P> (path: P) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2906},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":616559,"byte_end":616575,"line_start":745,"line_end":745,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"fn <P> (path: P) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2908},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":617150,"byte_end":617161,"line_start":760,"line_end":760,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2910},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":617814,"byte_end":617837,"line_start":782,"line_end":782,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2912},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":618399,"byte_end":618415,"line_start":805,"line_end":805,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"fn (buffer: &[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2913},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":618897,"byte_end":618925,"line_start":820,"line_end":820,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"fn (buf: &[u8], format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":618872,"byte_end":618889,"line_start":819,"line_end":819,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4211},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624339,"byte_end":624350,"line_start":23,"line_end":23,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::image::ImageError::FormatError","value":"ImageError::FormatError(String)","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" The Image is not formatted properly\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4214},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624430,"byte_end":624444,"line_start":26,"line_end":26,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::image::ImageError::DimensionError","value":"ImageError::DimensionError","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" The Image's dimensions are either too small or too large\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4216},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624506,"byte_end":624522,"line_start":29,"line_end":29,"column_start":5,"column_end":21},"name":"UnsupportedError","qualname":"::image::ImageError::UnsupportedError","value":"ImageError::UnsupportedError(String)","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" The Decoder does not support this image format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4219},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624590,"byte_end":624606,"line_start":32,"line_end":32,"column_start":5,"column_end":21},"name":"UnsupportedColor","qualname":"::image::ImageError::UnsupportedColor","value":"ImageError::UnsupportedColor(ColorType)","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" The Decoder does not support this color type\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4222},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624704,"byte_end":624717,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::image::ImageError::NotEnoughData","value":"ImageError::NotEnoughData","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" Not enough data was provided to the Decoder\n to decode the image\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4224},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624779,"byte_end":624786,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"IoError","qualname":"::image::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" An I/O Error occurred while decoding the image\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4227},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624850,"byte_end":624858,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"ImageEnd","qualname":"::image::ImageError::ImageEnd","value":"ImageError::ImageEnd","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" The end of the image has been reached\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4229},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624932,"byte_end":624950,"line_start":45,"line_end":45,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::image::ImageError::InsufficientMemory","value":"ImageError::InsufficientMemory","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" There is not enough memory to complete the given operation\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4210},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624278,"byte_end":624288,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::image::ImageError","value":"ImageError::{FormatError, DimensionError, UnsupportedError, UnsupportedColor, NotEnoughData, IoError, ImageEnd, InsufficientMemory}","parent":null,"children":[{"krate":0,"index":4211},{"krate":0,"index":4214},{"krate":0,"index":4216},{"krate":0,"index":4219},{"krate":0,"index":4222},{"krate":0,"index":4224},{"krate":0,"index":4227},{"krate":0,"index":4229}],"decl_id":null,"docs":" An enumeration of Image errors\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2938},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627112,"byte_end":627123,"line_start":110,"line_end":110,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::image::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4234},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627359,"byte_end":627362,"line_start":117,"line_end":117,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageFormat::PNG","value":"ImageFormat::PNG","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4236},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627401,"byte_end":627405,"line_start":120,"line_end":120,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageFormat::JPEG","value":"ImageFormat::JPEG","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4238},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627443,"byte_end":627446,"line_start":123,"line_end":123,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageFormat::GIF","value":"ImageFormat::GIF","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4240},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627485,"byte_end":627489,"line_start":126,"line_end":126,"column_start":5,"column_end":9},"name":"WEBP","qualname":"::image::ImageFormat::WEBP","value":"ImageFormat::WEBP","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4242},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627535,"byte_end":627538,"line_start":129,"line_end":129,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageFormat::PNM","value":"ImageFormat::PNM","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4244},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627577,"byte_end":627581,"line_start":132,"line_end":132,"column_start":5,"column_end":9},"name":"TIFF","qualname":"::image::ImageFormat::TIFF","value":"ImageFormat::TIFF","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4246},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627619,"byte_end":627622,"line_start":135,"line_end":135,"column_start":5,"column_end":8},"name":"TGA","qualname":"::image::ImageFormat::TGA","value":"ImageFormat::TGA","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4248},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627660,"byte_end":627663,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageFormat::BMP","value":"ImageFormat::BMP","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4250},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627701,"byte_end":627704,"line_start":141,"line_end":141,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageFormat::ICO","value":"ImageFormat::ICO","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4252},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627751,"byte_end":627754,"line_start":144,"line_end":144,"column_start":5,"column_end":8},"name":"HDR","qualname":"::image::ImageFormat::HDR","value":"ImageFormat::HDR","parent":{"krate":0,"index":4233},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4233},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627310,"byte_end":627321,"line_start":115,"line_end":115,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"ImageFormat::{PNG, JPEG, GIF, WEBP, PNM, TIFF, TGA, BMP, ICO, HDR}","parent":null,"children":[{"krate":0,"index":4234},{"krate":0,"index":4236},{"krate":0,"index":4238},{"krate":0,"index":4240},{"krate":0,"index":4242},{"krate":0,"index":4244},{"krate":0,"index":4246},{"krate":0,"index":4248},{"krate":0,"index":4250},{"krate":0,"index":4252}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627861,"byte_end":627870,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"fn <P> (path: P) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4264},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628321,"byte_end":628324,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageOutputFormat::PNG","value":"ImageOutputFormat::PNG","parent":{"krate":0,"index":4263},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628256,"byte_end":628285,"line_start":159,"line_end":159,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4266},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628415,"byte_end":628419,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageOutputFormat::JPEG","value":"ImageOutputFormat::JPEG(u8)","parent":{"krate":0,"index":4263},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628331,"byte_end":628355,"line_start":163,"line_end":163,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4269},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628501,"byte_end":628504,"line_start":169,"line_end":169,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageOutputFormat::PNM","value":"ImageOutputFormat::PNM(PNMSubtype)","parent":{"krate":0,"index":4263},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628430,"byte_end":628453,"line_start":167,"line_end":167,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4272},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628588,"byte_end":628591,"line_start":173,"line_end":173,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageOutputFormat::GIF","value":"ImageOutputFormat::GIF","parent":{"krate":0,"index":4263},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628523,"byte_end":628552,"line_start":171,"line_end":171,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4274},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628657,"byte_end":628660,"line_start":177,"line_end":177,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageOutputFormat::ICO","value":"ImageOutputFormat::ICO","parent":{"krate":0,"index":4263},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628598,"byte_end":628621,"line_start":175,"line_end":175,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4276},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628726,"byte_end":628729,"line_start":181,"line_end":181,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageOutputFormat::BMP","value":"ImageOutputFormat::BMP","parent":{"krate":0,"index":4263},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628667,"byte_end":628690,"line_start":179,"line_end":179,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4278},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628981,"byte_end":628992,"line_start":186,"line_end":186,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":4263},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4263},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":628232,"byte_end":628249,"line_start":158,"line_end":158,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"ImageOutputFormat::{PNG, JPEG, PNM, GIF, ICO, BMP, Unsupported}","parent":null,"children":[{"krate":0,"index":4264},{"krate":0,"index":4266},{"krate":0,"index":4269},{"krate":0,"index":4272},{"krate":0,"index":4274},{"krate":0,"index":4276},{"krate":0,"index":4278}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4290},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":636312,"byte_end":636320,"line_start":367,"line_end":367,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":4291},{"krate":0,"index":4292}],"decl_id":null,"docs":" Represents the progress of an image operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2962},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":636412,"byte_end":636424,"line_start":373,"line_end":373,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":2964},{"krate":0,"index":2965},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969},{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2973}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2964},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":636501,"byte_end":636507,"line_start":375,"line_end":375,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2965},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":636597,"byte_end":636607,"line_start":378,"line_end":378,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"fn (&self) -> (u64, u64)","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":636705,"byte_end":636714,"line_start":381,"line_end":381,"column_start":8,"column_end":17},"name":"colortype","qualname":"::image::ImageDecoder::colortype","value":"fn (&self) -> ColorType","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Returns the color type of the image e.g. RGB(8) (8bit RGB)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2967},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":637007,"byte_end":637018,"line_start":386,"line_end":386,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"fn (self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2968},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":637190,"byte_end":637199,"line_start":390,"line_end":390,"column_start":8,"column_end":17},"name":"row_bytes","qualname":"::image::ImageDecoder::row_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Returns the number of bytes in a single row of the image. All decoders will pad image rows\n to a byte boundary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2969},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":637377,"byte_end":637388,"line_start":395,"line_end":395,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2970},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":637621,"byte_end":637635,"line_start":401,"line_end":401,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2971},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":637737,"byte_end":637747,"line_start":406,"line_end":406,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"fn (self) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2973},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":637959,"byte_end":637983,"line_start":412,"line_end":412,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"fn <F> (self, progress_callback: F) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":2962},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2975},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639098,"byte_end":639113,"line_start":449,"line_end":449,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder<'a> + Sized","parent":null,"children":[{"krate":0,"index":2977},{"krate":0,"index":2979}],"decl_id":null,"docs":" ImageDecoderExt trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2977},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639202,"byte_end":639211,"line_start":451,"line_end":451,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"fn (&mut self, x: u64, y: u64, width: u64, height: u64, buf: &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2979},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639522,"byte_end":639545,"line_start":463,"line_end":463,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"fn <F> (&mut self, x: u64, y: u64, width: u64, height: u64, buf: &mut [u8], progress_callback: F) -> ImageResult<()>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image, periodically reporting progress.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2981},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639776,"byte_end":639792,"line_start":475,"line_end":475,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":2983}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2983},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639864,"byte_end":639875,"line_start":477,"line_end":477,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"fn (self) -> Frames<'a>","parent":{"krate":0,"index":2981},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2984},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639940,"byte_end":639946,"line_start":481,"line_end":481,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2987},{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2997},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":640579,"byte_end":640595,"line_start":512,"line_end":512,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3005},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2998},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":640634,"byte_end":640639,"line_start":514,"line_end":514,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2999},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":640873,"byte_end":640887,"line_start":519,"line_end":519,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":640980,"byte_end":640990,"line_start":522,"line_end":522,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"fn (&self) -> (u32, u32)","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":641054,"byte_end":641059,"line_start":525,"line_end":525,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"fn (&self) -> u32","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3002},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":641174,"byte_end":641180,"line_start":531,"line_end":531,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"fn (&self) -> u32","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":641307,"byte_end":641313,"line_start":537,"line_end":537,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"fn (&self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":641430,"byte_end":641439,"line_start":540,"line_end":540,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"fn (&self, x: u32, y: u32) -> bool","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3005},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":641762,"byte_end":641771,"line_start":552,"line_end":552,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3006},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":641958,"byte_end":641974,"line_start":557,"line_end":557,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3007},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":642206,"byte_end":642212,"line_start":564,"line_end":564,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"fn (&self) -> Pixels<Self>","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3008},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":642482,"byte_end":642487,"line_start":577,"line_end":577,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"fn (&self) -> &Self::InnerImageView","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":642684,"byte_end":642688,"line_start":581,"line_end":581,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"fn (&self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3010},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":642887,"byte_end":642899,"line_start":587,"line_end":587,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3015},{"krate":0,"index":3016},{"krate":0,"index":3018},{"krate":0,"index":3019}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3011},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":643144,"byte_end":643154,"line_start":591,"line_end":591,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3012},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":643344,"byte_end":643357,"line_start":598,"line_end":598,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3013},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":643531,"byte_end":643540,"line_start":605,"line_end":605,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":643732,"byte_end":643748,"line_start":610,"line_end":610,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3015},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":644015,"byte_end":644026,"line_start":617,"line_end":617,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3016},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":644505,"byte_end":644514,"line_start":629,"line_end":629,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"fn <O> (&mut self, other: &O, x: u32, y: u32) -> bool","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3018},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":645146,"byte_end":645155,"line_start":649,"line_end":649,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"fn (&mut self) -> &mut Self::InnerImage","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3019},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":645350,"byte_end":645359,"line_start":653,"line_end":653,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3020},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":645850,"byte_end":645858,"line_start":670,"line_end":670,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3024},{"krate":0,"index":3025},{"krate":0,"index":3026}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3033},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":646246,"byte_end":646249,"line_start":686,"line_end":686,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"fn (image: I, x: u32, y: u32, width: u32, height: u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3034},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":646538,"byte_end":646551,"line_start":697,"line_end":697,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3035},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":646785,"byte_end":646793,"line_start":705,"line_end":705,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"fn (&self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3059},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":655918,"byte_end":655927,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3072},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":656449,"byte_end":656460,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3073},{"krate":0,"index":3074}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3073},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":656499,"byte_end":656505,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":3072},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":656548,"byte_end":656558,"line_start":29,"line_end":29,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"fn (n: Self::Larger) -> Self","parent":{"krate":0,"index":3072},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":5991,"byte_end":5999,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":37237,"byte_end":37244,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":37688,"byte_end":37696,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":50269,"byte_end":50281,"line_start":298,"line_end":298,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":69058,"byte_end":69064,"line_start":67,"line_end":67,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":70430,"byte_end":70436,"line_start":114,"line_end":114,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":71201,"byte_end":71207,"line_start":136,"line_end":136,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/free_functions.rs","byte_start":85081,"byte_end":85091,"line_start":289,"line_end":289,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":89078,"byte_end":89090,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":101707,"byte_end":101710,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":101968,"byte_end":101979,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":123730,"byte_end":123734,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":129305,"byte_end":129312,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":133689,"byte_end":133700,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":134309,"byte_end":134320,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":134924,"byte_end":134928,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":136176,"byte_end":136183,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":137451,"byte_end":137458,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":138354,"byte_end":138364,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":138756,"byte_end":138766,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":147403,"byte_end":147414,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":155918,"byte_end":155926,"line_start":360,"line_end":360,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":157384,"byte_end":157393,"line_start":406,"line_end":406,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":158669,"byte_end":158684,"line_start":461,"line_end":461,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":160540,"byte_end":160550,"line_start":513,"line_end":513,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":191091,"byte_end":191100,"line_start":1287,"line_end":1287,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":191520,"byte_end":191530,"line_start":1301,"line_end":1301,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":192114,"byte_end":192124,"line_start":1325,"line_end":1325,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/encoder.rs","byte_start":193746,"byte_end":193756,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":205528,"byte_end":205538,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":206497,"byte_end":206507,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":208155,"byte_end":208165,"line_start":113,"line_end":113,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":209338,"byte_end":209348,"line_start":152,"line_end":152,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210310,"byte_end":210319,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210579,"byte_end":210589,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":234218,"byte_end":234225,"line_start":53,"line_end":53,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":234641,"byte_end":234650,"line_start":67,"line_end":67,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":235063,"byte_end":235070,"line_start":81,"line_end":81,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":236722,"byte_end":236738,"line_start":135,"line_end":135,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":237347,"byte_end":237363,"line_start":157,"line_end":157,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":242260,"byte_end":242267,"line_start":285,"line_end":285,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":242530,"byte_end":242537,"line_start":297,"line_end":297,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":244764,"byte_end":244774,"line_start":359,"line_end":359,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":245991,"byte_end":246001,"line_start":25,"line_end":25,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":247411,"byte_end":247420,"line_start":71,"line_end":71,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":247836,"byte_end":247846,"line_start":85,"line_end":85,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":248458,"byte_end":248468,"line_start":110,"line_end":110,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249767,"byte_end":249777,"line_start":169,"line_end":169,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":252059,"byte_end":252069,"line_start":234,"line_end":234,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1102},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":257846,"byte_end":257856,"line_start":389,"line_end":389,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":258756,"byte_end":258779,"line_start":417,"line_end":417,"column_start":18,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":259072,"byte_end":259095,"line_start":430,"line_end":430,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":260802,"byte_end":260825,"line_start":479,"line_end":479,"column_start":40,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":267570,"byte_end":267581,"line_start":667,"line_end":667,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":274186,"byte_end":274192,"line_start":832,"line_end":832,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":274476,"byte_end":274482,"line_start":840,"line_end":840,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":278223,"byte_end":278233,"line_start":11,"line_end":11,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":280790,"byte_end":280801,"line_start":88,"line_end":88,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":280927,"byte_end":280938,"line_start":94,"line_end":94,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":281639,"byte_end":281659,"line_start":123,"line_end":123,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":281918,"byte_end":281938,"line_start":133,"line_end":133,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1224},{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":294542,"byte_end":294552,"line_start":42,"line_end":42,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":296971,"byte_end":296979,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":298292,"byte_end":298301,"line_start":165,"line_end":165,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":298721,"byte_end":298731,"line_start":179,"line_end":179,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/encoder.rs","byte_start":303542,"byte_end":303552,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":306744,"byte_end":306755,"line_start":16,"line_end":16,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":307457,"byte_end":307467,"line_start":38,"line_end":38,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":307880,"byte_end":307891,"line_start":52,"line_end":52,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":309330,"byte_end":309339,"line_start":106,"line_end":106,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":309651,"byte_end":309661,"line_start":117,"line_end":117,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":315726,"byte_end":315735,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":318762,"byte_end":318773,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1458}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":344399,"byte_end":344408,"line_start":27,"line_end":27,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":345137,"byte_end":345146,"line_start":51,"line_end":51,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":346408,"byte_end":346418,"line_start":97,"line_end":97,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":346903,"byte_end":346913,"line_start":111,"line_end":111,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":347737,"byte_end":347747,"line_start":145,"line_end":145,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":348456,"byte_end":348465,"line_start":164,"line_end":164,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":349558,"byte_end":349568,"line_start":194,"line_end":194,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/autobreak.rs","byte_start":356675,"byte_end":356684,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/autobreak.rs","byte_start":357945,"byte_end":357954,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/autobreak.rs","byte_start":358580,"byte_end":358589,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":360980,"byte_end":360990,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":374184,"byte_end":374193,"line_start":409,"line_end":409,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":374322,"byte_end":374331,"line_start":413,"line_end":413,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1680},{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":374744,"byte_end":374754,"line_start":427,"line_end":427,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":375216,"byte_end":375226,"line_start":447,"line_end":447,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1698}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":376894,"byte_end":376903,"line_start":489,"line_end":489,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":378290,"byte_end":378292,"line_start":532,"line_end":532,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":378992,"byte_end":378995,"line_start":561,"line_end":561,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":380254,"byte_end":380260,"line_start":600,"line_end":600,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":381764,"byte_end":381769,"line_start":650,"line_end":650,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":382599,"byte_end":382611,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":382736,"byte_end":382749,"line_start":686,"line_end":686,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1733}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":383129,"byte_end":383141,"line_start":698,"line_end":698,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":383517,"byte_end":383532,"line_start":710,"line_end":710,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":398275,"byte_end":398285,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":405560,"byte_end":405578,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1819}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":406711,"byte_end":406726,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1824}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":407214,"byte_end":407231,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1827}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":410735,"byte_end":410753,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":412884,"byte_end":412897,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1833},{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":413207,"byte_end":413219,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":414636,"byte_end":414647,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":416358,"byte_end":416369,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":416488,"byte_end":416499,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":416600,"byte_end":416613,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421759,"byte_end":421769,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1881},{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":422739,"byte_end":422748,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":428928,"byte_end":428937,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":429130,"byte_end":429139,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1897}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":429333,"byte_end":429342,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":429537,"byte_end":429546,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1901}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":430450,"byte_end":430459,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":432304,"byte_end":432310,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1948},{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":433579,"byte_end":433587,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1956}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":434704,"byte_end":434714,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":446048,"byte_end":446058,"line_start":493,"line_end":493,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":446943,"byte_end":446952,"line_start":531,"line_end":531,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2003}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":447811,"byte_end":447822,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":448245,"byte_end":448255,"line_start":45,"line_end":45,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2030}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":448724,"byte_end":448733,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":449347,"byte_end":449357,"line_start":71,"line_end":71,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2041}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":449777,"byte_end":449788,"line_start":85,"line_end":85,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":450487,"byte_end":450498,"line_start":113,"line_end":113,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2055},{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":452069,"byte_end":452080,"line_start":24,"line_end":24,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":454258,"byte_end":454268,"line_start":104,"line_end":104,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2096}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":454681,"byte_end":454692,"line_start":118,"line_end":118,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103},{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":483460,"byte_end":483470,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":487872,"byte_end":487882,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2226},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2248}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":508875,"byte_end":508883,"line_start":1521,"line_end":1521,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2251},{"krate":0,"index":2252}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509500,"byte_end":509508,"line_start":1544,"line_end":1544,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2254}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509573,"byte_end":509583,"line_start":1550,"line_end":1550,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509872,"byte_end":509882,"line_start":1562,"line_end":1562,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2258}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509949,"byte_end":509958,"line_start":1568,"line_end":1568,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2260}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":510495,"byte_end":510504,"line_start":1586,"line_end":1586,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2262}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525174,"byte_end":525180,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2300}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525771,"byte_end":525777,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2303},{"krate":0,"index":2304}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526133,"byte_end":526138,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532989,"byte_end":532995,"line_start":178,"line_end":178,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2397},{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":533239,"byte_end":533245,"line_start":190,"line_end":190,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2403}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":533394,"byte_end":533400,"line_start":199,"line_end":199,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2407}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":533770,"byte_end":533779,"line_start":217,"line_end":217,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2416},{"krate":0,"index":2417}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534035,"byte_end":534044,"line_start":229,"line_end":229,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2422}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534193,"byte_end":534202,"line_start":238,"line_end":238,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2426}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534606,"byte_end":534610,"line_start":258,"line_end":258,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2435},{"krate":0,"index":2436}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534933,"byte_end":534937,"line_start":272,"line_end":272,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2441}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":535086,"byte_end":535090,"line_start":281,"line_end":281,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2445}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":535545,"byte_end":535552,"line_start":301,"line_end":301,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2454},{"krate":0,"index":2455}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":535888,"byte_end":535895,"line_start":315,"line_end":315,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2460}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":536044,"byte_end":536051,"line_start":324,"line_end":324,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2464}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":536547,"byte_end":536562,"line_start":347,"line_end":347,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2476},{"krate":0,"index":2477}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":536965,"byte_end":536980,"line_start":365,"line_end":365,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2482}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":537292,"byte_end":537305,"line_start":384,"line_end":384,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2492},{"krate":0,"index":2493}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":537843,"byte_end":537856,"line_start":408,"line_end":408,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538192,"byte_end":538210,"line_start":428,"line_end":428,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2509},{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538621,"byte_end":538639,"line_start":446,"line_end":446,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2515}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538957,"byte_end":538973,"line_start":465,"line_end":465,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2525},{"krate":0,"index":2526}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":539520,"byte_end":539536,"line_start":489,"line_end":489,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2531}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":540038,"byte_end":540049,"line_start":511,"line_end":511,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2535},{"krate":0,"index":2536},{"krate":0,"index":2537},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2550},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":545692,"byte_end":545703,"line_start":678,"line_end":678,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2558},{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":547873,"byte_end":547884,"line_start":747,"line_end":747,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2567}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":548494,"byte_end":548505,"line_start":771,"line_end":771,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":549206,"byte_end":549217,"line_start":797,"line_end":797,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2577},{"krate":0,"index":2578}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":549481,"byte_end":549492,"line_start":810,"line_end":810,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2582}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":549758,"byte_end":549769,"line_start":821,"line_end":821,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2586},{"krate":0,"index":2587}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":550040,"byte_end":550051,"line_start":834,"line_end":834,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2591}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":550312,"byte_end":550323,"line_start":845,"line_end":845,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2595}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":550682,"byte_end":550693,"line_start":860,"line_end":860,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":551517,"byte_end":551528,"line_start":893,"line_end":893,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2614}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":552982,"byte_end":552993,"line_start":935,"line_end":935,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":555427,"byte_end":555436,"line_start":1013,"line_end":1013,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2627}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":556834,"byte_end":556845,"line_start":1051,"line_end":1051,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":2635}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561965,"byte_end":561974,"line_start":34,"line_end":34,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2653},{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568015,"byte_end":568016,"line_start":247,"line_end":247,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2663}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568172,"byte_end":568176,"line_start":255,"line_end":255,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2666}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568555,"byte_end":568559,"line_start":265,"line_end":265,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568941,"byte_end":568945,"line_start":275,"line_end":275,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2672}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":569323,"byte_end":569327,"line_start":286,"line_end":286,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2675}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":569707,"byte_end":569711,"line_start":297,"line_end":297,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2678}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":569906,"byte_end":569911,"line_start":305,"line_end":305,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2681}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":570328,"byte_end":570333,"line_start":316,"line_end":316,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2684}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":570749,"byte_end":570754,"line_start":327,"line_end":327,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2687}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":571172,"byte_end":571177,"line_start":338,"line_end":338,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2690}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":571596,"byte_end":571601,"line_start":349,"line_end":349,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2693}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":571860,"byte_end":571864,"line_start":359,"line_end":359,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2696}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":572165,"byte_end":572169,"line_start":370,"line_end":370,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2699}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":572471,"byte_end":572475,"line_start":381,"line_end":381,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2702}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":572777,"byte_end":572781,"line_start":393,"line_end":393,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2705}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":573084,"byte_end":573088,"line_start":406,"line_end":406,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":573413,"byte_end":573417,"line_start":420,"line_end":420,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":573719,"byte_end":573723,"line_start":432,"line_end":432,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574026,"byte_end":574030,"line_start":444,"line_end":444,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2717}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574331,"byte_end":574335,"line_start":455,"line_end":455,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574636,"byte_end":574640,"line_start":466,"line_end":466,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2723}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574966,"byte_end":574969,"line_start":481,"line_end":481,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2726}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":575239,"byte_end":575242,"line_start":492,"line_end":492,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2729}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":575510,"byte_end":575513,"line_start":502,"line_end":502,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2732}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":575778,"byte_end":575781,"line_start":512,"line_end":512,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2735}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576045,"byte_end":576048,"line_start":522,"line_end":522,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2738}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576334,"byte_end":576337,"line_start":534,"line_end":534,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2741}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576605,"byte_end":576608,"line_start":544,"line_end":544,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2744}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576873,"byte_end":576876,"line_start":555,"line_end":555,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":577146,"byte_end":577149,"line_start":565,"line_end":565,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2750}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":577413,"byte_end":577416,"line_start":575,"line_end":575,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2753}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":577792,"byte_end":577797,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":578802,"byte_end":578806,"line_start":625,"line_end":625,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2761}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":578916,"byte_end":578920,"line_start":631,"line_end":631,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2764}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":581128,"byte_end":581132,"line_start":689,"line_end":689,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2767}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583338,"byte_end":583341,"line_start":745,"line_end":745,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2770}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583450,"byte_end":583453,"line_start":751,"line_end":751,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583672,"byte_end":583677,"line_start":764,"line_end":764,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2778}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583850,"byte_end":583854,"line_start":773,"line_end":773,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2781}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584042,"byte_end":584046,"line_start":784,"line_end":784,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2784}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584259,"byte_end":584263,"line_start":795,"line_end":795,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2787}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584476,"byte_end":584479,"line_start":806,"line_end":806,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2790}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584741,"byte_end":584744,"line_start":820,"line_end":820,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2793}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":593279,"byte_end":593291,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2839},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2850},{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2858},{"krate":0,"index":2859},{"krate":0,"index":2860},{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2864},{"krate":0,"index":2865},{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2882},{"krate":0,"index":2884}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":610487,"byte_end":610499,"line_start":584,"line_end":584,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2892}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":611019,"byte_end":611031,"line_start":606,"line_end":606,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624977,"byte_end":624987,"line_start":48,"line_end":48,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2932}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":626196,"byte_end":626206,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2934},{"krate":0,"index":2935}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":626955,"byte_end":626965,"line_start":103,"line_end":103,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2937}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627764,"byte_end":627775,"line_start":147,"line_end":147,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2941}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":629032,"byte_end":629049,"line_start":189,"line_end":189,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2944}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":630184,"byte_end":630199,"line_start":223,"line_end":223,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2953}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":640090,"byte_end":640096,"line_start":489,"line_end":489,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2995},{"krate":0,"index":2996}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":646188,"byte_end":646196,"line_start":684,"line_end":684,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3035}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":647333,"byte_end":647341,"line_start":725,"line_end":725,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043},{"krate":0,"index":3044}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":648162,"byte_end":648170,"line_start":757,"line_end":757,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3047},{"krate":0,"index":3048},{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2038,"byte_end":2042,"line_start":74,"line_end":74,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":93}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/mod.rs","byte_start":3525,"byte_end":3527,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/mod.rs","byte_start":3537,"byte_end":3542,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":132}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2083,"byte_end":2091,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":135}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/mod.rs","byte_start":19037,"byte_end":19045,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2117,"byte_end":2119,"line_start":80,"line_end":80,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":344}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2165,"byte_end":2169,"line_start":83,"line_end":83,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":443}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2220,"byte_end":2223,"line_start":87,"line_end":87,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":600}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2257,"byte_end":2260,"line_start":89,"line_end":89,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":819}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2300,"byte_end":2303,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":931}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2337,"byte_end":2340,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1022}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2374,"byte_end":2377,"line_start":95,"line_end":95,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1233}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2412,"byte_end":2416,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1334}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2456,"byte_end":2459,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1498}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2493,"byte_end":2496,"line_start":101,"line_end":101,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1554}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2530,"byte_end":2533,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1902}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2568,"byte_end":2572,"line_start":105,"line_end":105,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2005}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/lib.rs","byte_start":2607,"byte_end":2611,"line_start":107,"line_end":107,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2057}},{"kind":"Mod","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/mod.rs","byte_start":451565,"byte_end":451568,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2111}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/math/nq.rs","byte_start":5991,"byte_end":5999,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":37237,"byte_end":37244,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3106},"to":{"krate":0,"index":225}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/colorops.rs","byte_start":37688,"byte_end":37696,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":110},"to":{"krate":0,"index":225}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/imageops/sample.rs","byte_start":50269,"byte_end":50281,"line_start":298,"line_end":298,"column_start":34,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":69058,"byte_end":69064,"line_start":67,"line_end":67,"column_start":15,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":70430,"byte_end":70436,"line_start":114,"line_end":114,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/reader.rs","byte_start":71201,"byte_end":71207,"line_start":136,"line_end":136,"column_start":25,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/io/free_functions.rs","byte_start":85081,"byte_end":85091,"line_start":289,"line_end":289,"column_start":26,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":89078,"byte_end":89090,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":101707,"byte_end":101710,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":101968,"byte_end":101979,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":123730,"byte_end":123734,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":129305,"byte_end":129312,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":133689,"byte_end":133700,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3127},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":134309,"byte_end":134320,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3127},"to":{"krate":2,"index":1783}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":134924,"byte_end":134928,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":2997}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":136176,"byte_end":136183,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3197},"to":{"krate":0,"index":2997}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":137451,"byte_end":137458,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3197},"to":{"krate":0,"index":3010}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":138354,"byte_end":138364,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/flat.rs","byte_start":138756,"byte_end":138766,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3232},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":147403,"byte_end":147414,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":660},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":155918,"byte_end":155926,"line_start":360,"line_end":360,"column_start":6,"column_end":14},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":157384,"byte_end":157393,"line_start":406,"line_end":406,"column_start":6,"column_end":15},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3317},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":158669,"byte_end":158684,"line_start":461,"line_end":461,"column_start":32,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":160540,"byte_end":160550,"line_start":513,"line_end":513,"column_start":22,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":191091,"byte_end":191100,"line_start":1287,"line_end":1287,"column_start":18,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":771},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":191520,"byte_end":191530,"line_start":1301,"line_end":1301,"column_start":52,"column_end":62},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":693},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/decoder.rs","byte_start":192114,"byte_end":192124,"line_start":1325,"line_end":1325,"column_start":55,"column_end":65},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":693},"to":{"krate":0,"index":2975}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/bmp/encoder.rs","byte_start":193746,"byte_end":193756,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":205528,"byte_end":205538,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":206497,"byte_end":206507,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":208155,"byte_end":208165,"line_start":113,"line_end":113,"column_start":45,"column_end":55},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":839},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":209338,"byte_end":209348,"line_start":152,"line_end":152,"column_start":55,"column_end":65},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":839},"to":{"krate":0,"index":2975}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210310,"byte_end":210319,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":866},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dxt.rs","byte_start":210579,"byte_end":210589,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":234218,"byte_end":234225,"line_start":53,"line_end":53,"column_start":15,"column_end":22},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":234641,"byte_end":234650,"line_start":67,"line_end":67,"column_start":18,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":235063,"byte_end":235070,"line_start":81,"line_end":81,"column_start":45,"column_end":52},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":961},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":236722,"byte_end":236738,"line_start":135,"line_end":135,"column_start":15,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":985},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":237347,"byte_end":237363,"line_start":157,"line_end":157,"column_start":28,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":985},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":242260,"byte_end":242267,"line_start":285,"line_end":285,"column_start":49,"column_end":56},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":961},"to":{"krate":0,"index":2981}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":242530,"byte_end":242537,"line_start":297,"line_end":297,"column_start":16,"column_end":23},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/gif.rs","byte_start":244764,"byte_end":244774,"line_start":359,"line_end":359,"column_start":35,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":245991,"byte_end":246001,"line_start":25,"line_end":25,"column_start":18,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":247411,"byte_end":247420,"line_start":71,"line_end":71,"column_start":18,"column_end":27},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1055},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":247836,"byte_end":247846,"line_start":85,"line_end":85,"column_start":48,"column_end":58},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3345},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":248458,"byte_end":248468,"line_start":110,"line_end":110,"column_start":58,"column_end":68},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3345},"to":{"krate":0,"index":2975}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":249767,"byte_end":249777,"line_start":169,"line_end":169,"column_start":6,"column_end":16},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":252059,"byte_end":252069,"line_start":234,"line_end":234,"column_start":18,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":257846,"byte_end":257856,"line_start":389,"line_end":389,"column_start":35,"column_end":45},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3353},"to":{"krate":2,"index":3808}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":258756,"byte_end":258779,"line_start":417,"line_end":417,"column_start":18,"column_end":41},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":259072,"byte_end":259095,"line_start":430,"line_end":430,"column_start":31,"column_end":54},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1111},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":260802,"byte_end":260825,"line_start":479,"line_end":479,"column_start":40,"column_end":63},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1111},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":267570,"byte_end":267581,"line_start":667,"line_end":667,"column_start":6,"column_end":17},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":274186,"byte_end":274192,"line_start":832,"line_end":832,"column_start":46,"column_end":52},"kind":{"Impl":{"id":54}},"from":{"krate":2,"index":29129},"to":{"krate":0,"index":1158}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/decoder.rs","byte_start":274476,"byte_end":274482,"line_start":840,"line_end":840,"column_start":46,"column_end":52},"kind":{"Impl":{"id":55}},"from":{"krate":2,"index":29129},"to":{"krate":0,"index":1158}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":278223,"byte_end":278233,"line_start":11,"line_end":11,"column_start":16,"column_end":26},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":280790,"byte_end":280801,"line_start":88,"line_end":88,"column_start":10,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":280927,"byte_end":280938,"line_start":94,"line_end":94,"column_start":23,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1203},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":281639,"byte_end":281659,"line_start":123,"line_end":123,"column_start":10,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/hdr/encoder.rs","byte_start":281918,"byte_end":281938,"line_start":133,"line_end":133,"column_start":23,"column_end":43},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1215},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":294542,"byte_end":294552,"line_start":42,"line_end":42,"column_start":22,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":296971,"byte_end":296979,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":298292,"byte_end":298301,"line_start":165,"line_end":165,"column_start":18,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1290},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/decoder.rs","byte_start":298721,"byte_end":298731,"line_start":179,"line_end":179,"column_start":52,"column_end":62},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1258},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/ico/encoder.rs","byte_start":303542,"byte_end":303552,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":306744,"byte_end":306755,"line_start":16,"line_end":16,"column_start":15,"column_end":26},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":307457,"byte_end":307467,"line_start":38,"line_end":38,"column_start":18,"column_end":28},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1357},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":307880,"byte_end":307891,"line_start":52,"line_end":52,"column_start":45,"column_end":56},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1350},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":309330,"byte_end":309339,"line_start":106,"line_end":106,"column_start":42,"column_end":51},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3734},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/decoder.rs","byte_start":309651,"byte_end":309661,"line_start":117,"line_end":117,"column_start":36,"column_end":46},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":315726,"byte_end":315735,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/jpeg/encoder.rs","byte_start":318762,"byte_end":318773,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":344399,"byte_end":344408,"line_start":27,"line_end":27,"column_start":15,"column_end":24},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":345137,"byte_end":345146,"line_start":51,"line_end":51,"column_start":24,"column_end":33},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1509},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":346408,"byte_end":346418,"line_start":97,"line_end":97,"column_start":15,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":346903,"byte_end":346913,"line_start":111,"line_end":111,"column_start":45,"column_end":55},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1521},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":347737,"byte_end":347747,"line_start":145,"line_end":145,"column_start":16,"column_end":26},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":348456,"byte_end":348465,"line_start":164,"line_end":164,"column_start":48,"column_end":57},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3734},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/png.rs","byte_start":349558,"byte_end":349568,"line_start":194,"line_end":194,"column_start":35,"column_end":45},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/autobreak.rs","byte_start":356675,"byte_end":356684,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/autobreak.rs","byte_start":357945,"byte_end":357954,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1571},"to":{"krate":1,"index":2902}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/autobreak.rs","byte_start":358580,"byte_end":358589,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1571},"to":{"krate":2,"index":1725}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":360980,"byte_end":360990,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":364437,"byte_end":364444,"line_start":152,"line_end":152,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2924},"to":{"krate":0,"index":1649}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":374184,"byte_end":374193,"line_start":409,"line_end":409,"column_start":32,"column_end":41},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":2310},"to":{"krate":0,"index":1649}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":374322,"byte_end":374331,"line_start":413,"line_end":413,"column_start":18,"column_end":27},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1673},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":374744,"byte_end":374754,"line_start":427,"line_end":427,"column_start":45,"column_end":55},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1636},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":375216,"byte_end":375226,"line_start":447,"line_end":447,"column_start":15,"column_end":25},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":376894,"byte_end":376903,"line_start":489,"line_end":489,"column_start":6,"column_end":15},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":378290,"byte_end":378292,"line_start":532,"line_end":532,"column_start":17,"column_end":19},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1626},"to":{"krate":0,"index":1622}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":378992,"byte_end":378995,"line_start":561,"line_end":561,"column_start":17,"column_end":20},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1628},"to":{"krate":0,"index":1622}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":380254,"byte_end":380260,"line_start":600,"line_end":600,"column_start":17,"column_end":23},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1630},"to":{"krate":0,"index":1622}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":381764,"byte_end":381769,"line_start":650,"line_end":650,"column_start":17,"column_end":22},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1632},"to":{"krate":0,"index":1622}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":382599,"byte_end":382611,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3504},"to":{"krate":0,"index":1634}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":382736,"byte_end":382749,"line_start":686,"line_end":686,"column_start":31,"column_end":44},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3513},"to":{"krate":0,"index":1634}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":383129,"byte_end":383141,"line_start":698,"line_end":698,"column_start":31,"column_end":43},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":3523},"to":{"krate":0,"index":1634}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/decoder.rs","byte_start":383517,"byte_end":383532,"line_start":710,"line_end":710,"column_start":31,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3533},"to":{"krate":0,"index":1634}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":398275,"byte_end":398285,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":405560,"byte_end":405578,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":406711,"byte_end":406726,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":407214,"byte_end":407231,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":410735,"byte_end":410753,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":412884,"byte_end":412897,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":413207,"byte_end":413219,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1835},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":414636,"byte_end":414647,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":416358,"byte_end":416369,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3455},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":416488,"byte_end":416499,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3455},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/encoder.rs","byte_start":416600,"byte_end":416613,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1796},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":421759,"byte_end":421769,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":422739,"byte_end":422748,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":428928,"byte_end":428937,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1864},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":429130,"byte_end":429139,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1864},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":429333,"byte_end":429342,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1864},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/pnm/header.rs","byte_start":429537,"byte_end":429546,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1864},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":430450,"byte_end":430459,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":432304,"byte_end":432310,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":433579,"byte_end":433587,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":434704,"byte_end":434714,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1957},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":446048,"byte_end":446058,"line_start":493,"line_end":493,"column_start":52,"column_end":62},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1957},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tga/decoder.rs","byte_start":446943,"byte_end":446952,"line_start":531,"line_end":531,"column_start":31,"column_end":40},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1997},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":447811,"byte_end":447822,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2021},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":448245,"byte_end":448255,"line_start":45,"line_end":45,"column_start":32,"column_end":42},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":448724,"byte_end":448733,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3734},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":449347,"byte_end":449357,"line_start":71,"line_end":71,"column_start":18,"column_end":28},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2033},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":449777,"byte_end":449788,"line_start":85,"line_end":85,"column_start":52,"column_end":63},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2021},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/tiff.rs","byte_start":450487,"byte_end":450498,"line_start":113,"line_end":113,"column_start":23,"column_end":34},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":452069,"byte_end":452080,"line_start":24,"line_end":24,"column_start":15,"column_end":26},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":454258,"byte_end":454268,"line_start":104,"line_end":104,"column_start":18,"column_end":28},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2088},"to":{"krate":1,"index":2848}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/decoder.rs","byte_start":454681,"byte_end":454692,"line_start":118,"line_end":118,"column_start":45,"column_end":56},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2076},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":483460,"byte_end":483470,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":487872,"byte_end":487882,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":508875,"byte_end":508883,"line_start":1521,"line_end":1521,"column_start":6,"column_end":14},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509500,"byte_end":509508,"line_start":1544,"line_end":1544,"column_start":18,"column_end":26},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3578},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509573,"byte_end":509583,"line_start":1550,"line_end":1550,"column_start":6,"column_end":16},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509872,"byte_end":509882,"line_start":1562,"line_end":1562,"column_start":18,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3603},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":509949,"byte_end":509958,"line_start":1568,"line_end":1568,"column_start":6,"column_end":15},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/webp/vp8.rs","byte_start":510495,"byte_end":510504,"line_start":1586,"line_end":1586,"column_start":18,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3625},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525174,"byte_end":525180,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":525771,"byte_end":525777,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2294},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/animation.rs","byte_start":526133,"byte_end":526138,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":527638,"byte_end":527642,"line_start":18,"line_end":18,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1542},"to":{"krate":0,"index":2348}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":527645,"byte_end":527650,"line_start":18,"line_end":18,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":2348}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":532989,"byte_end":532995,"line_start":178,"line_end":178,"column_start":38,"column_end":44},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2390},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":533239,"byte_end":533245,"line_start":190,"line_end":190,"column_start":47,"column_end":53},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2390},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":533394,"byte_end":533400,"line_start":199,"line_end":199,"column_start":49,"column_end":55},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2390},"to":{"krate":2,"index":3767}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":533770,"byte_end":533779,"line_start":217,"line_end":217,"column_start":38,"column_end":47},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2409},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534035,"byte_end":534044,"line_start":229,"line_end":229,"column_start":47,"column_end":56},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2409},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534193,"byte_end":534202,"line_start":238,"line_end":238,"column_start":49,"column_end":58},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2409},"to":{"krate":2,"index":3767}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534606,"byte_end":534610,"line_start":258,"line_end":258,"column_start":38,"column_end":42},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2428},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":534933,"byte_end":534937,"line_start":272,"line_end":272,"column_start":47,"column_end":51},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2428},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":535086,"byte_end":535090,"line_start":281,"line_end":281,"column_start":49,"column_end":53},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2428},"to":{"krate":2,"index":3767}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":535545,"byte_end":535552,"line_start":301,"line_end":301,"column_start":38,"column_end":45},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":535888,"byte_end":535895,"line_start":315,"line_end":315,"column_start":47,"column_end":54},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":536044,"byte_end":536051,"line_start":324,"line_end":324,"column_start":49,"column_end":56},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3767}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":536547,"byte_end":536562,"line_start":347,"line_end":347,"column_start":38,"column_end":53},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2466},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":536965,"byte_end":536980,"line_start":365,"line_end":365,"column_start":47,"column_end":62},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2466},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":537292,"byte_end":537305,"line_start":384,"line_end":384,"column_start":38,"column_end":51},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2483},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":537843,"byte_end":537856,"line_start":408,"line_end":408,"column_start":47,"column_end":60},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":2483},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538192,"byte_end":538210,"line_start":428,"line_end":428,"column_start":38,"column_end":56},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2499},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538621,"byte_end":538639,"line_start":446,"line_end":446,"column_start":47,"column_end":65},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2499},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":538957,"byte_end":538973,"line_start":465,"line_end":465,"column_start":38,"column_end":54},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2516},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":539520,"byte_end":539536,"line_start":489,"line_end":489,"column_start":47,"column_end":63},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2516},"to":{"krate":2,"index":3796}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":540038,"byte_end":540049,"line_start":511,"line_end":511,"column_start":20,"column_end":31},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":545692,"byte_end":545703,"line_start":678,"line_end":678,"column_start":20,"column_end":31},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":547873,"byte_end":547884,"line_start":747,"line_end":747,"column_start":20,"column_end":31},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":548494,"byte_end":548505,"line_start":771,"line_end":771,"column_start":20,"column_end":31},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":549206,"byte_end":549217,"line_start":797,"line_end":797,"column_start":30,"column_end":41},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3723},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":549481,"byte_end":549492,"line_start":810,"line_end":810,"column_start":33,"column_end":44},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3723},"to":{"krate":2,"index":1714}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":549758,"byte_end":549769,"line_start":821,"line_end":821,"column_start":42,"column_end":53},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3723},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":550040,"byte_end":550051,"line_start":834,"line_end":834,"column_start":45,"column_end":56},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3723},"to":{"krate":2,"index":1783}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":550312,"byte_end":550323,"line_start":845,"line_end":845,"column_start":30,"column_end":41},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3723},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":550682,"byte_end":550693,"line_start":860,"line_end":860,"column_start":41,"column_end":52},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3723},"to":{"krate":0,"index":2997}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":551517,"byte_end":551528,"line_start":893,"line_end":893,"column_start":37,"column_end":48},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3723},"to":{"krate":0,"index":3010}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":552982,"byte_end":552993,"line_start":935,"line_end":935,"column_start":26,"column_end":37},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":555427,"byte_end":555436,"line_start":1013,"line_end":1013,"column_start":6,"column_end":15},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/buffer.rs","byte_start":556834,"byte_end":556845,"line_start":1051,"line_end":1051,"column_start":67,"column_end":78},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3723},"to":{"krate":0,"index":2623}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":561965,"byte_end":561974,"line_start":34,"line_end":34,"column_start":6,"column_end":15},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568015,"byte_end":568016,"line_start":247,"line_end":247,"column_start":32,"column_end":33},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2662},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568172,"byte_end":568176,"line_start":255,"line_end":255,"column_start":53,"column_end":57},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4089},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568555,"byte_end":568559,"line_start":265,"line_end":265,"column_start":53,"column_end":57},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4089},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":568941,"byte_end":568945,"line_start":275,"line_end":275,"column_start":52,"column_end":56},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4089},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":569323,"byte_end":569327,"line_start":286,"line_end":286,"column_start":52,"column_end":56},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4089},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":569707,"byte_end":569711,"line_start":297,"line_end":297,"column_start":54,"column_end":58},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4089},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":569906,"byte_end":569911,"line_start":305,"line_end":305,"column_start":53,"column_end":58},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4164},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":570328,"byte_end":570333,"line_start":316,"line_end":316,"column_start":53,"column_end":58},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4164},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":570749,"byte_end":570754,"line_start":327,"line_end":327,"column_start":52,"column_end":57},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4164},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":571172,"byte_end":571177,"line_start":338,"line_end":338,"column_start":52,"column_end":57},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4164},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":571596,"byte_end":571601,"line_start":349,"line_end":349,"column_start":53,"column_end":58},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":4164},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":571860,"byte_end":571864,"line_start":359,"line_end":359,"column_start":52,"column_end":56},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":4114},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":572165,"byte_end":572169,"line_start":370,"line_end":370,"column_start":52,"column_end":56},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4114},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":572471,"byte_end":572475,"line_start":381,"line_end":381,"column_start":53,"column_end":57},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4114},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":572777,"byte_end":572781,"line_start":393,"line_end":393,"column_start":54,"column_end":58},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4114},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":573084,"byte_end":573088,"line_start":406,"line_end":406,"column_start":53,"column_end":57},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4114},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":573413,"byte_end":573417,"line_start":420,"line_end":420,"column_start":52,"column_end":56},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4139},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":573719,"byte_end":573723,"line_start":432,"line_end":432,"column_start":52,"column_end":56},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4139},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574026,"byte_end":574030,"line_start":444,"line_end":444,"column_start":53,"column_end":57},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":4139},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574331,"byte_end":574335,"line_start":455,"line_end":455,"column_start":54,"column_end":58},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4139},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574636,"byte_end":574640,"line_start":466,"line_end":466,"column_start":53,"column_end":57},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4139},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":574966,"byte_end":574969,"line_start":481,"line_end":481,"column_start":53,"column_end":56},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4039},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":575239,"byte_end":575242,"line_start":492,"line_end":492,"column_start":53,"column_end":56},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":4039},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":575510,"byte_end":575513,"line_start":502,"line_end":502,"column_start":52,"column_end":55},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":4039},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":575778,"byte_end":575781,"line_start":512,"line_end":512,"column_start":54,"column_end":57},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4039},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576045,"byte_end":576048,"line_start":522,"line_end":522,"column_start":53,"column_end":56},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4039},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576334,"byte_end":576337,"line_start":534,"line_end":534,"column_start":53,"column_end":56},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576605,"byte_end":576608,"line_start":544,"line_end":544,"column_start":52,"column_end":55},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":576873,"byte_end":576876,"line_start":555,"line_end":555,"column_start":53,"column_end":56},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":577146,"byte_end":577149,"line_start":565,"line_end":565,"column_start":54,"column_end":57},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":577413,"byte_end":577416,"line_start":575,"line_end":575,"column_start":53,"column_end":56},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":2658}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":577792,"byte_end":577797,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":4164},"to":{"krate":0,"index":2754}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":578802,"byte_end":578806,"line_start":625,"line_end":625,"column_start":30,"column_end":34},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4089},"to":{"krate":0,"index":2754}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":578916,"byte_end":578920,"line_start":631,"line_end":631,"column_start":30,"column_end":34},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":4114},"to":{"krate":0,"index":2754}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":581128,"byte_end":581132,"line_start":689,"line_end":689,"column_start":30,"column_end":34},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4139},"to":{"krate":0,"index":2754}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583338,"byte_end":583341,"line_start":745,"line_end":745,"column_start":30,"column_end":33},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":4039},"to":{"krate":0,"index":2754}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583450,"byte_end":583453,"line_start":751,"line_end":751,"column_start":30,"column_end":33},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":2754}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583672,"byte_end":583677,"line_start":764,"line_end":764,"column_start":31,"column_end":36},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":4164},"to":{"krate":0,"index":2774}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":583850,"byte_end":583854,"line_start":773,"line_end":773,"column_start":31,"column_end":35},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":4089},"to":{"krate":0,"index":2774}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584042,"byte_end":584046,"line_start":784,"line_end":784,"column_start":31,"column_end":35},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":4114},"to":{"krate":0,"index":2774}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584259,"byte_end":584263,"line_start":795,"line_end":795,"column_start":31,"column_end":35},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":4139},"to":{"krate":0,"index":2774}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584476,"byte_end":584479,"line_start":806,"line_end":806,"column_start":31,"column_end":34},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":4039},"to":{"krate":0,"index":2774}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/color.rs","byte_start":584741,"byte_end":584744,"line_start":820,"line_end":820,"column_start":31,"column_end":34},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":2774}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":593279,"byte_end":593291,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":4189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":610487,"byte_end":610499,"line_start":584,"line_end":584,"column_start":27,"column_end":39},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":4189},"to":{"krate":0,"index":2997}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/dynimage.rs","byte_start":611019,"byte_end":611031,"line_start":606,"line_end":606,"column_start":23,"column_end":35},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":4189},"to":{"krate":0,"index":3010}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":624977,"byte_end":624987,"line_start":48,"line_end":48,"column_start":23,"column_end":33},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":626196,"byte_end":626206,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":4210},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":626955,"byte_end":626965,"line_start":103,"line_end":103,"column_start":26,"column_end":36},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":4210},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":627764,"byte_end":627775,"line_start":147,"line_end":147,"column_start":6,"column_end":17},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":4233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":629032,"byte_end":629049,"line_start":189,"line_end":189,"column_start":28,"column_end":45},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":4263},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":630184,"byte_end":630199,"line_start":223,"line_end":223,"column_start":6,"column_end":21},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":636430,"byte_end":636435,"line_start":373,"line_end":373,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":2962}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639119,"byte_end":639131,"line_start":449,"line_end":449,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":2962},"to":{"krate":0,"index":2975}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":639138,"byte_end":639143,"line_start":449,"line_end":449,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":2975}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":640090,"byte_end":640096,"line_start":489,"line_end":489,"column_start":44,"column_end":50},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2984},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":642901,"byte_end":642917,"line_start":587,"line_end":587,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2997},"to":{"krate":0,"index":3010}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":646188,"byte_end":646196,"line_start":684,"line_end":684,"column_start":9,"column_end":17},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":3020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":647333,"byte_end":647341,"line_start":725,"line_end":725,"column_start":30,"column_end":38},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":3020},"to":{"krate":0,"index":2997}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/image.rs","byte_start":648162,"byte_end":648170,"line_start":757,"line_end":757,"column_start":26,"column_end":34},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":3020},"to":{"krate":0,"index":3010}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":655929,"byte_end":655933,"line_start":9,"line_end":9,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1542},"to":{"krate":0,"index":3059}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":655936,"byte_end":655943,"line_start":9,"line_end":9,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":18,"index":179},"to":{"krate":0,"index":3059}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":655946,"byte_end":655949,"line_start":9,"line_end":9,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":18,"index":571},"to":{"krate":0,"index":3059}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":655952,"byte_end":655962,"line_start":9,"line_end":9,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":3059}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":655971,"byte_end":655976,"line_start":9,"line_end":9,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":3059}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":655979,"byte_end":655986,"line_start":9,"line_end":9,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":18,"index":96},"to":{"krate":0,"index":3059}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":656462,"byte_end":656467,"line_start":26,"line_end":26,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":3072}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":656470,"byte_end":656477,"line_start":26,"line_end":26,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":18,"index":96},"to":{"krate":0,"index":3072}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.22.3/./src/traits.rs","byte_start":656480,"byte_end":656487,"line_start":26,"line_end":26,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":18,"index":179},"to":{"krate":0,"index":3072}}]}