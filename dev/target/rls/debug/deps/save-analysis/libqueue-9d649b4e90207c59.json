{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1","program":"/home/victor/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","queue","/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=9d649b4e90207c59","-C","extra-filename=-9d649b4e90207c59","--out-dir","/home/victor/coding/rust/dev/target/rls/debug/deps","-L","dependency=/home/victor/coding/rust/dev/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/victor/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/victor/coding/rust/dev/target/rls/debug/deps/libqueue-9d649b4e90207c59.rmeta"},"prelude":{"crate_id":{"name":"queue","disambiguator":[9099250523334509537,13625557156284384309]},"crate_root":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src","external_crates":[{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}}],"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":0,"byte_end":6820,"line_start":1,"line_end":306,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":0,"byte_end":6820,"line_start":1,"line_end":306,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":29},{"krate":0,"index":39},{"krate":0,"index":36},{"krate":0,"index":33},{"krate":0,"index":12},{"krate":0,"index":15}],"decl_id":null,"docs":" A simple and easy wrapper around `Vec` to implement a FIFO queue. This is\n no fancy, advanced data type but something simple you can use easily until\n or unless you need something different.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":1412,"byte_end":1417,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"Queue","qualname":"::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" A first in, first out queue built around `Vec`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":1923,"byte_end":1926,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"name":"new","qualname":"<Queue<T>>::new","value":"fn () -> Queue<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Queue<T>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":2189,"byte_end":2202,"line_start":106,"line_end":106,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<Queue<T>>::with_capacity","value":"fn (cap: usize) -> Queue<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Queue<T>` with a specified capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":2624,"byte_end":2629,"line_start":124,"line_end":124,"column_start":9,"column_end":14},"name":"queue","qualname":"<Queue<T>>::queue","value":"fn (&mut self, item: T) -> Result<usize, ()>","parent":null,"children":[],"decl_id":null,"docs":" Add an item to the end of the `Queue`. Returns `Ok(usize)` with the new\n length of the `Queue`, or `Err(())` if there is no more room.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":3299,"byte_end":3310,"line_start":151,"line_end":151,"column_start":9,"column_end":20},"name":"force_queue","qualname":"<Queue<T>>::force_queue","value":"fn (&mut self, item: T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Forcefully add an item to the end of the `Queue`. If the `Queue` is at\n capacity, the first item will be removed to make room. Returns `usize`\n with the new length of the `Queue`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":3885,"byte_end":3892,"line_start":173,"line_end":173,"column_start":9,"column_end":16},"name":"dequeue","qualname":"<Queue<T>>::dequeue","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the next item from the `Queue`. Returns `Option<T>` so it will\n return either `Some(T)` or `None` depending on if there's anything in\n the `Queue` to get.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":4273,"byte_end":4276,"line_start":193,"line_end":193,"column_start":9,"column_end":12},"name":"vec","qualname":"<Queue<T>>::vec","value":"fn (&self) -> &Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a `&Vec<T>` for the `Queue<T>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":4555,"byte_end":4559,"line_start":207,"line_end":207,"column_start":9,"column_end":13},"name":"peek","qualname":"<Queue<T>>::peek","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Peek at the next item in the `Queue`, if there's something there.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":4916,"byte_end":4919,"line_start":226,"line_end":226,"column_start":9,"column_end":12},"name":"len","qualname":"<Queue<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of items currently in the `Queue`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":5203,"byte_end":5211,"line_start":241,"line_end":241,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<Queue<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the `Queue` is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":5598,"byte_end":5606,"line_start":256,"line_end":256,"column_start":9,"column_end":17},"name":"capacity","qualname":"<Queue<T>>::capacity","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Query the capacity for a `Queue`. If there is no capacity set (the\n `Queue` can grow as needed) then `None` will be returned, otherwise\n it will be `Some(usize)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":6341,"byte_end":6353,"line_start":276,"line_end":276,"column_start":9,"column_end":21},"name":"set_capacity","qualname":"<Queue<T>>::set_capacity","value":"fn <C> (&mut self, cap: C) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Modify the capacity of a `Queue`. If set to `None`, the `Queue` will\n grow automatically, as needed. Otherwise, it will be limited to the\n specified number of items. If there are more items in the `Queue` than\n the requested capacity, `Err(())` will be returned, otherwise the\n operation will succeed and `Ok(())` will be returned. If the capacity\n is shrunk, the underlying `Vec` will be shrunk also, which would free\n up whatever extra memory was allocated for the `Queue`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":1493,"byte_end":1498,"line_start":65,"line_end":65,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":1756,"byte_end":1761,"line_start":82,"line_end":82,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":1493,"byte_end":1498,"line_start":65,"line_end":65,"column_start":33,"column_end":38},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/victor/.cargo/registry/src/github.com-1ecc6299db9ec823/queue-0.3.1/src/lib.rs","byte_start":1756,"byte_end":1761,"line_start":82,"line_end":82,"column_start":16,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}}]}